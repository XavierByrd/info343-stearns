<!doctype html>
<html lang="en">
<head>
    <!--#include virtual="../inc/common-head.html" -->
    <meta name="description" content="Notes for Data Visualization in the Web Lecture">
    <title>Data Visualization Web Applications</title>
</head>
<body>

    <div class="container">

        <!--#include virtual="../inc/crumbtrail.html" -->
            
        <div class="page-header notes-header">
            <h1>Data Analysis and Visualization Applications</h1>
            <p class="lead">Dr David Stearns, Autumn 2013</p>
        </div>

        <ol class="lecture-outline">
            <li>Coming Up...
                <ol>
                    <li>Thurs, Nov 28: Happy Thanksgiving! No Class.
                    </li>
                    <li>Fri, Nov 29: Happy Black Friday! No Lab.
                    </li>
                    <li>Tues, Dec 3: Special Topics
                        <ol>
                            <li><em>Your choice of...</em></li>
                            <li>Angular.js (library for building easy data-bound views)</li>
                            <li>Node.js (implement a web server in JavaScript)</li>
                            <li>Sass and LESS (CSS Preprocessors)</li>
                        </ol>
                    </li>
                    <li>Thurs, Dec 5: Playing Nicely with Mobile Devices</li>
                    <li>Fri, Dec 6: Work on Final Projects</li>
                </ol>
            </li>

            <li>Today
                <ol>
                    <li>Debrief Homework v4.0</li>
                    <li>Check in on Final Projects</li>
                    <li>Overview of Content Management Systems</li>
                    <li>Building a Site in WordPress</li>
                    <li>Customizing WordPress</li>
                    <li>Drupal vs WordPress</li>
                </ol>
            </li>

            <li>Content Management Systems (CMSs)
                <ol>
                    <li>Basic definition: <strong>CMSs manage relatively unstructured content through a collaborative publication and archival process</strong></li>

                    <li>That definition breaks down into a few sub-areas:
                        <ol>
                            <li>"Relatively unstructured content"
                                <ol>
                                    <li>Transactional systems manage structured data, meaning records with several discrete fields</li>

                                    <li>In contrast, CMSs manage relatively unstructured "content," meaning large blobs of text (blog post, article, etc.) or binary data (images, binary documents) with accompanying meta-data fields.</li>

                                    <li>Nearly all CMSs will allow you to categorize that content using a controlled vocabulary to enable browsing</li>

                                    <li>Most CMSs will also index the content to enable searching</li>

                                    <li>Some CMSs will track multiple versions of the content, enabling audit history and rollback</li>
                                </ol>
                            </li>

                            <li>"Collaborative"
                                <ol>
                                    <li>CMSs use a centralized web server and database to track content that is managed by multiple users</li>

                                    <li>CMSs handle user account creation, authentication, and security policy enforcement</li>

                                    <li>Some CMSs can also send notifications to users when particular events occur (new content published, new comment, new subscription, etc.)</li>

                                    <li>Most CMSs allow identified or anonymous readers to interact with published content by making comments, giving ratings, sharing on social networks, etc.</li>
                                </ol>
                            </li>

                            <li>"Publication and Archival Process"
                                <ol>
                                    <li>Most CMSs were designed for the publishing industry, so they model a typical publication process</li>

                                    <li>New content is authored and saved as drafts, then published, and finally archived</li>

                                    <li>Security enforces who is allowed to generate new content, who is allowed to publish, and who is allowed to archive</li>
                                </ol>
                            </li>
                        </ol>
                    </li>

                    <li>Typical CMS Architecture
                        <ol>
                            <li>Some kind of centralized database to track the content, versions, categories, users, etc.</li>

                            <li>Core server functions for user accounts and authentication, categorization, core content types, site navigation</li>

                            <li>Plug-in modules that define and manage new kinds of content, or add new functionality</li>

                            <li>Template engine that merges content with various templates that comprise a "theme" (keeps content separate from presentation!)</li>
                        </ol>
                    </li>

                    <li>Hosted Blogging Platforms and CMSs
                        <ol>
                            <li>All hosted blogging platforms are CMSs, but most focus on a limited set of content types, and may not offer much in the way of customization</li>

                            <li>However, the software that runs those platforms can often be installed on your own server, and customized in much more powerful ways</li>

                            <li>For example, WordPress.com offers hosted WordPress blogs, but your ability to customize is quite limited unless you upgrade to a paid account</li>

                            <li>But you can install the WordPress code on any hosted web server (it's open source), install any plug-ins you want, and create your own child themes</li>
                        </ol>
                    </li>
                </ol>
            </li>

            <li>Building a Site in WordPress
                <ol>
                    <li>Installing WordPress
                        <ol>
                            <li>If you're using a commercial web host (e.g., <a href="http://www.a2hosting.com/">A2 Hosting</a>), installing WordPress is super easy&mdash;just click on the Softaculous installer and follow the on-screen instructions</li>

                            <li>If you're installed on your own server or your <a href="https://www.washington.edu/itconnect/connect/web-publishing/shared-hosting/installing-wordpress/">UW student web hosting server</a>, you need to do a few things:
                                <ol>
                                    <li>Download and install the <a href="http://dev.mysql.com/downloads/mysql/">MySQL relational database engine</a> on your web server, or some other server your web server can communicate with</li>
                                    
                                    <li>Download and uncompress <a href="http://wordpress.org/download/">the WordPress files</a> into a sub-directory of your web server's public_html directory&mdash;or in the public_html folder itself if you want the root of your site to be a WordPress installation</li>

                                    <li><a href="http://codex.wordpress.org/Installing_WordPress">Open your browser and request the directory into which you unzipped the files</a>; you should then see a configuration page where you can specify the connection information for the MySQL database, and a few options for your new site</li>

                                    <li>Once you submit the configuration options, your site will be live and ready for further configuration and and content</li>
                                </ol>
                            </li>
                        </ol>
                    </li>

                    <li>Configuring WordPress
                        <ol>
                            <li>The <a href="http://codex.wordpress.org/Administration_Panels">WordPress dashboard and administration screens</a> allow you to set general options for your site</li>

                            <li>The appearance settings allow you to choose a theme from a large set of pre-packaged themes (some are free, others can be purchased)</li>

                        </ol>
                    </li>

                    <li>Writing Content
                        <ol>
                            <li>WordPress supports two main kinds of content: posts and pages</li>

                            <li>Posts are timely and transient; they are for content that is current right now like a news story or announcement</li>

                            <li>Pages are timeless and are more like regular web site pages (about me, or policy statements)</li>

                            <li>Both pages and posts can have comments enabled or disabled, but only posts can be assigned to categories</li>

                            <li>Pages can be organized into a hierarchy, and the default site navigation bar displays all pages as a menu</li>
                        </ol>
                    </li>

                    <li>Customizing via Plug-Ins
                        <ol>
                            <li>WordPress has a wide array of plug-ins that add various functionality to your site</li>
                        </ol>
                    </li>

                    <li>Customizing via Child Themes
                        <ol>
                            <li>A child theme customizes another theme by overriding particular CSS styles</li>

                            <li>Create a new directory in the /themes/ directory for your child theme</li>

                            <li>Create a file in that new directory named "style.css" and put the following at the top:
                                <pre><code>
/*
 Theme Name:     Twenty Thirteen Child
 Theme URI:      http://example.com/twenty-thirteen-child/
 Description:    Twenty Thirteen Child Theme
 Author:         John Doe
 Author URI:     http://example.com
 Template:       twentythirteen
 Version:        1.0.0
*/

@import url(&quot;../twentythirteen/style.css&quot;);

/* =Theme customization starts here
-------------------------------------------------------------- */
                                </code></pre>
                            </li>

                            <li>The <code>template:</code> value should be set to the name of the theme you are modifying (in this case, the twentythireen theme); this is the <strong>directory name</strong> in which the parent theme files exist (peer to child theme's directory)</li>

                            <li>The other header values should of course be adjusted to something appropriate for your new child theme</li>

                            <li>The <code>@import url(....)</code> should import the <code>style.css</code> in the parent theme's directory</li>

                            <li>After this block, specify style rules that override those in the parent theme's style.css</li>

                            <li>Remember to check for style overrides in their media queries as well! Otherwise you might override only the desktop appearance</li>

                            <li>Can also create custom PHP pages for home, different kinds of content, author info, 404, etc.</li>

                            <li>Parent theme can either be a standard theme, or a <a href="http://wp.tutsplus.com/articles/the-wordpress-theme-frameworks-starter-guide/">theme framework</a>, which is a set of theme pages and CSS pieces designed to be used as building blocks</li>
                        </ol>
                    </li>


                </ol>
            </li>

            <li>Drupal vs WordPress
                <ol>
                    <li>As the Drupal folks like to describe it, WordPress is like that toy truck that you used to love playing with, but it had a limited range of possibility: it really always remained a truck. Drupal is more like a set of general-purpose Legos that you can use to assemble all kinds of different things</li>

                    <li>In other words, Drupal is more of a content management <em>framework</em> than a pre-packaged content management <em>system</em></li>

                    <li>WordPress comes "out of the box" configured as a blogging platform&mash;if that's what you want, then great; but if not, you'll have to do some work to reconfigure it into a general web site management platform</li>

                    <li>Drupal comes "out of the box" without any specific configuration&mdash;you have to put the relevant pieces together to make it a web site, blogging, or other kind of platform (some pre-packaged templates make this a bit easier)</li>

                    <li>Drupal is much more flexible, but that also means you have to have more of an idea of what you want to build; otherwise, it's just a bunch of general-purpose Legos sitting in a bucket!</li>
                </ol>
            </li>



        </ol> <!-- lecture -->

    </div> <!-- .container -->

</body>
</html>
