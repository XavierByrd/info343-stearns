<!doctype html>
<html lang="en">
<head>
    <!--#include virtual="../inc/common-head.html" -->
    <meta name="description" content="Notes for Page Layout Lecture">
    <title>Page Layout</title>
</head>
<body>

    <div class="container">

        <!--#include virtual="../inc/crumbtrail.html" -->
            
        <div class="page-header notes-header">
            <h1>Responding to the Device: Page Layout and Responsive Design</h1>
            <p class="lead">Dr David Stearns, Autumn 2013</p>
        </div>

        <ol class="lecture-outline">
            <li>Coming Up...
                <ol>
                    <li>Thurs Oct 17: CSS Frameworks
                        <ol>
                            <li><em>everyone please read through these...</em>
                                <ol>
                                    <li><a href="http://getbootstrap.com/getting-started/">Bootstrap Getting Started</a></li>
                                    <li><a href="http://foundation.zurb.com/docs/">Foundation Getting Started</a></li>
                                </ol>
                            </li>
                            <li><em>if you are interested in more advanced topics...</em>
                                <ol>
                                    <li><a href="http://lesscss.org/#docs">LESS Dynamic Stylesheet Language</a></li>
                                    <li><a href="http://sass-lang.com/tutorial.html">SASS Tutorial</a></li>                                    
                                </ol>
                            </li>
                        </ol>
                    </li>
                    <li>Friday Lab: Building a Site with Bootstrap</li>
                </ol>
            </li>

            <li>Today
                <ol>
                    <li>Debrief Lab</li>
                    <li>Page Layout Terms and Concepts</li>
                    <li>Three Common Approaches to Whole Page Layout</li>
                    <li>Building Multi-Column Layouts</li>
                    <li>Fixed, Relative, and Absolute Positioning</li>
                    <li>Media Queries</li>
                    <li>Responsive and Mobile-First Design</li>
                </ol>
            </li>

            <li>Page Layout Terms and Concepts
                <ol>
                    <li><dfn>Boxes</dfn> and <dfn>Grids</dfn>
                        <ol>
                            <li>Every web page is divided into a nested set of boxes (i.e., rectangular areas on the screen filled with content</li>

                            <li>The outer-most box is created by the <code>&lt;body&gt;</code> element</li>

                            <li>Child elements create additional boxes <em>within</em> their parent element's box (parent box = "container")</li>

                            <li>Percentage sizes on child boxes are relative to their container</li>
                            
                            <li>By default:
                                <ol>
                                    <li>each box automatically expands to display all of its contained content, including child boxes</li>
                                    
                                    <li><a href="../../examples/html/reference.shtml#paragraphs">paragraph</a>, <a href="../../examples/html/reference.shtml#sectioning">sectioning</a>, and <a href="../../examples/html/reference.shtml#lists">grouping</a> elements (p, pre, ul, ol, dl, table, article, main, section, h1-6, etc.) create boxes that fill the entire width of their containing box, and thus stack on top of one another&mdash;these are often called "block" elements</li>
                                    
                                    <li><a href="../../examples/html/reference.shtml#phrasing">phrasing</a> and <a href="../../examples/html/reference.shtml#hyperlinks">hyperlink</a> elements (a, em, strong, span, sup, sub, etc.) create boxes that are placed in-line with their surrounding content, and they can't be resized or padded</li>
                                </ol>
                            </li>

                            <li>I say "by default" because <em>all of this</em> can be overridden in CSS
                                <ol>
                                    <li><code>display</code> property changes default layout behavior</li>
                                    
                                    <li>allows a few hybrid layout styles, like <code>inline-block</code>, which behaves like inline, but allows line-wrapping as well as size and padding adjustments</li>
                                </ol>
                            </li>

                            <li>One common reason for overriding this is to create <a href="../../examples/layout/grid.html">multi-column, grid-based layouts</a></li>
                        </ol>
                    </li>
                    
                    <li><dfn>The Viewport</dfn>
                        <ol>
                            <li>The viewable area of the browser window is called the "viewport"</li>
                            
                            <li>Resizing windowed browser adjust viewport</li>
                            
                            <li>Viewport of full-screen mobile browser changes with portrait/landscape rotation, but zoom is separate</li>

                            <li>You can apply different styles to different sizes of viewports using CSS <dfn>media queries</dfn></li>
                        </ol>
                    </li>
                </ol>
            </li>

            <li>Three Common Approaches to Whole Page Layout
                <ol>
                    <li>Fixed Layout
                        <ol>
                            <li>Uses a fixed-width content box (~960px) that is then divided into a grid of fixed-width boxes</li>
                            
                            <li>Often used by newspaper sites, such as <a href="http://www.nytimes.com/">The New York Times</a></li>
                            
                            <li>Gives precise control over the grid, with few surprises when content changes, but doesn't adapt to different viewport sizes</li>
                            
                            <li>Sites that use this approach typically build a separate 'm.' version of their site for mobile devices, or a separate native mobile app (especially if they want to charge for content)</li>
                        </ol>
                    </li>

                    <li>Fluid (aka Liquid) Layout
                        <ol>
                            <li>Allows body content box to adjust to the viewport size, but left/top (and sometimes right or bottom) content remains fixed</li>

                            <li>Used by many sites, including <a href="http://en.wikipedia.org/wiki/Main_Page">Wikipedia</a></li>
                            
                            <li>Content is also not typically scaled down for very small viewports, which can lead to excessive scrolling</li>
                            
                            <li>Sites that use this approach often build a separate 'm.' site, or build a native mobile app</li>
                        </ol>
                    </li>

                    <li>Responsive Layout
                        <ol>
                            <li>Takes fluid to the next level: content scales, layout changes, and some elements are swapped out for more appropriate ones</li>

                            <li>Many examples now: <a href="https://ischool.uw.edu/">UW iSchool</a>, <a href="http://www.nscs.org/">NSCS</a>, <a href="http://www.sketchin.ch/en/">Sketchin</a></li>
                            
                            <li>See also <a href="http://socialdriver.com/2013/06/50-best-responsive-website-design-examples-of-2013/">50 Best Responsive Site Examples</a></li>
                            
                            <li>One Site to Rule Them All!</li>

                            <li>They are more difficult to build, but CSS frameworks (which we will discuss on Thursday) do a lot of the heavy lifting for you</li>
                        </ol>
                    </li>
                </ol>
            </li>

            <li>Building <a href="../../examples/layout/grid.html">Multi-Column Layouts</a>
                <ol>
                    <li>A common layout technique is to put a few boxes next to each other in a multi-column layout</li>

                    <li>The old way of doing this (1990s) was to use a <code>&lt;table&gt;</code> element, but that is considered very bad form now because it's not semantically appropriate; the <code>&lt;table&gt;</code> element is for tabular data, not layout</li>

                    <li>Use <code>&lt;div&gt;</code> elements instead with class attributes for grid, row, and column</li>
                    
                    <li>Three general approaches for doing this:
                        <ol>
                            <li>display: float
                                <ol>
                                    <li>each column has <code>float: left;</code> and <code>width: xx%;</code></li>
                                    <li>next row (or element you want to appear under) has <code>clear: both;</code></li>
                                    <li>if you want to shade or draw a border around the whole row or grid, you can need to use an advanced technique called a "micro-clear," which you can see in <a href="../../examples/layout/css/styles.css">the source CSS file for the multi-column layout example page</a> (see the ".grid-float .row:after" rule)</li>
                                    <li>this technique has the widest browser support, and is commonly used by CSS frameworks</li>
                                </ol>
                            </li>

                            <li>display: inline-Block
                                <ol>
                                    <li>each column has <code>display: inline-block;</code> and <code>width: xx%;</code></li>
                                    <li>also add <code>vertical-align: top;</code> to top-align content (actually works in this case!)</li>
                                    <li>this technique <a href="http://caniuse.com/inline-block">works in all current browsers</a>, but has less support in older mobile browsers</li>
                                </ol>
                            </li>

                            <li>display: table-cell
                                <ol>
                                    <li>each column has <code>display: table-cell;</code> and <code>width: xx%;</code></li>
                                    <li>perfectly fine, but might freak out those who hate the idea of using tables for layout</li>
                                    <li>this technique also has <a href="http://caniuse.com/#feat=css-table">good support in all current browsers</a></li>
                                </ol>
                                
                            </li>
                        </ol>
                    </li>

                    <li>Regardless of which approach you use, <strong>you should set <code>box-sizing: border-box;</code> so that the browser includes the padding and border in the box width</strong>; otherwise, 33% would only refer to the content area of a column, so any padding or border would cause the column to wrap to the next line!</li>

                    <li>Firefox still requires <code>-moz-box-sizing: border-box;</code>, so include that as well</li>

                </ol>
            </li>

            <li><a href="../../examples/layout/positioning.html">Fixed, Relative, and Absolute Positioning</a>
                <ol>
                    <li>So far, all our content has been positioned in the flow of the page, or floated to the left or right</li>
                    <li>But CSS lets you adjust the position of content in a few other ways as well via the <code>position</code> property</li>
                    
                    <li>Fixed Positioning
                        <ol>
                            <li><code>position: fixed;</code></li>

                            <li>allows you to make an element fixed on the page so that it stays in the same place relative to the viewport even when scrolling</li>

                            <li>most commonly used for fixed nav bars and footers, but can also be used for an image or tool bar that shouldn't scroll with the page</li>

                            <li>use <code>left</code>, <code>top</code>, <code>right</code>, or <code>bottom</code> properties to specify where in the viewport the element should appear</li>

                            <li>fixed block elements no longer have a 100% by default; use <code>width</code> and/or <code>height</code> to control width and height explicitly</li>
                        </ol>
                    </li>

                    <li>Relative Positioning
                        <ol>
                            <li><code>position: relative;</code></li>

                            <li>allows you to shift an element away from where it would normally be positioned</li>

                            <li>use <code>left</code>, <code>top</code>, <code>right</code>, or <code>bottom</code> properties to specify a positive or negative offset from the element's "natural" position</li>

                            <li>because margin can be used to shift elements as well, this is most commonly used to make a containing element a "positioned element" so that a contained element with <code>position: absolute;</code> can position relative to the parent's box coordinates</li>

                            <li>positioned elements automatically get a higher z-order so they appear on top of other content; use <code>z-index</code> property to adjust this (e.g., <code>z-order: -1;</code>)</li>
                        </ol>
                    </li>
                    
                    <li>Absolute Positioning
                        <ol>
                            <li><code>position: absolute;</code></li>

                            <li>allows you to place the element anywhere within the containing positioned element (i.e., an element with something other than <code>position: static;</code>)</li>

                            <li>use <code>left</code>, <code>top</code>, <code>right</code>, or <code>bottom</code> properties to specify a position relative to the containing positioned element</li>

                        </ol>
                    </li>

                </ol>
            </li>

            <li><a href="http://www.w3.org/TR/css3-mediaqueries/">Media Queries</a>
                <ol>
                    <li>You can use relative units (%, em) to achieve some amount of scaling, but CSS also allows you to apply a specific and different set of styles based on viewport size and other device capabilities</li>

                    <li>Use them to define specific styles for print, phones, tablets, and large screens</li>

                    <li>Most developers will use a base set of styles with relative units, but also define "breakpoints," or minimum viewport widths at which a new set of styles will apply (e.g., 400, 768, 990, and 1200px)</li>

                    <li>Do this using "media queries"
                        <ol>
                            <li>syntax: <code>@media [screen|print] and (device-test) and (device-test) and ... { ...style rules... }</code> </li>
                            <li>examples: <code>@media (min-width: 768px) { ...style rules... }</code>
                                <ol>
                                    <li>styles just for print: <code>@media print {...}</code></li>
                                    <li>styles for screens smaller than 768: <code>@media screen and (max-width: 768px) {...}</code></li>
                                    <li>styles for screens with high-def resolution: <code>@media screen and (min-resolution: 300dpi) {...}</code></li>
                                </ol>
                            </li>

                            <li>CSS Frameworks (Bootstrap, Foundation) includes these for you, but you can build your own, or augment theirs</li>
                        </ol>
                    </li>
                </ol>
            </li>

            <li>Responsive and Mobile-First Design
                <ol>
                    <li></li>
                </ol>
            </li>


        </ol>
    </div> <!-- .container -->
</body>
</html>