<!doctype html>
<html lang="en">
<head>
    <!--#include virtual="../inc/common-head.html" -->
    <meta name="description" content="Notes for Intro to JavaScript Lecture">
    <title>Intro to JavaScript</title>
</head>
<body>

    <div class="container">

        <!--#include virtual="../inc/crumbtrail.html" -->
            
        <div class="page-header notes-header">
            <h1>JavaScript: The Good Parts</h1>
            <p class="lead">Dr David Stearns, Autumn 2013</p>
        </div>

        <ol class="lecture-outline">
            <li>Coming Up...
                <ol>
                    <li>Thursday, Oct 24
                        <ol>
                            <li>The jQuery Library</li>
                            <li><em>Please read...</em>
                                <ol>
                                    <li><a href="http://learn.jquery.com/about-jquery/how-jquery-works/">How jQuery Works</a></li>
                                    <li><a href="http://learn.jquery.com/using-jquery-core/">Using jQuery Core</a></li>
                                    <li><a href="http://learn.jquery.com/events/">Catching Events in jQuery</a></li>
                                </ol>
                            </li>
                        </ol>
                    </li>
                    <li>Friday Lab, Oct 25
                        <ol>
                            <li>Interacting with the Reader via JavaScript</li>
                        </ol>
                    </li>
                </ol>
            </li>

            <li>Today:
                <ol>
                    <li>Debrief Lab 4</li>
                    <li>What is JavaScript?</li>
                    <li>Data Types and Variables</li>
                    <li>Functions</li>
                    <li>JavaScript and the Document Object Model (DOM)</li>
                    <li>Debugging JavaScript in the Browser</li>
                </ol>
            </li>

            <li>What is JavaScript?
                <ol>
                    <li>JavaScript is <strong>not</strong> Java!</li>

                    <li>Basic syntax and control-of-flow structures are similar, but that's about it</li>

                    <li>Based more on Scheme and Self than Java</li>

                    <li>The 'Java' part of the name was a marketing attempt to associate it with Java, which was very popular at the time</li>

                    <li>Key Differences
                        <ol>
                            <li>Java requires compilation; JavaScript is parsed and interpreted on-the-fly
                                <ol>
                                    <li>No compile step is convenient, but it also means that you don't get helpful warnings or errors from the compiler</li>

                                    <li>Enables some really interesting scenarios, such as self-modifying code</li>
                                </ol>
                            </li>

                            <li>Java is strongly-typed; JavaScript is loosely-typed
                                <ol>
                                    <li>In Java, variables, parameters, and function return values all have explicit data types, and one must cast or convert when working with disparate data types</li>

                                    <li>In JavaScript, all variables, parameters and return values are variants; they have no explicit type, can hold values of any type, and data type conversion during operations is automatic (but not always how you might expect)</li>
                                </ol>
                            </li>

                            <li>Java has block scope; JavaScript has function scope
                                <ol>
                                    <li>In Java, variables declared within a block such as <code>{...}</code> are visible only within that block</li>
                                    <li>In JavaScript, variables declared anywhere in a function are visible <em>everywhere</em> in that function</li>
                                </ol>
                            </li>

                            <li>Java is a class-based object-oriented language; JavaScript is a prototype-based object-oriented language
                                <ol>
                                    <li>Java classes are defined in a strict hierarchical type system, and can't be altered at runtime</li>

                                    <li>JavaScript objects may have a "prototype," which is another object from which the object inherits properties and functions defined in the prototype, and which can be of any type, and which can change at runtime</li>

                                    <li>JavaScript objects are also open, meaning that you can replace, delete, or add members to an any object at runtime</li>

                                    <li>In general, JavaScript OO is not about create new types; rather it's about creating objects that can do specific things</li>
                                </ol>
                            </li>

                            <li>Java has object member access control; JavaScript does not
                                <ol>
                                    <li>In Java, you can mark a property or method as being private or protected, which enables information encapsulation</li>

                                    <li>JavaScript is more like Twitter; everything is public unless you go to great lengths to keep it hidden</li>
                                </ol>
                            </li>

                            <li>JavaScript also supports a few useful things that Java does not
                                <ol>
                                    <li>Functions are Objects and can be passed around and manipulated as such</li>

                                    <li>Because all objects are open and all members are public, you can enhance or extend the core objects</li>

                                    <li>JavaScript enables "closures," which are functions defined within another function, and which have access to the containing function's stack variables at the time of the original call; this is useful for callback functions, which are heavily used in AJAX (next week)</li>
                                </ol>
                            </li>
                        </ol>
                    </li>

                    <li>Where can you use JavaScript, and what can you do with it?
                        <ol>
                            <li>In the browser (desktop, laptop, and mobile)
                                <ol>
                                    <li>add a <code>&lt;script&gt;</code> element, which can either contain embedded JavaScript (OK), or can point to a separate script file via the <code>src</code> attribute (better)</li>

                                    <li>can respond to user events (mouse, keyboard, touch-screen gestures)</li>

                                    <li>can modify page elements and styles</li>

                                    <li>can access some system services (geolocation, local storage, history, etc)</li>

                                    <li>can communicate and exchange data with web servers in the background (AJAX)</li>
                                </ol>
                            </li>

                            <li>On a web server
                                <ol>
                                    <li><a href="http://nodejs.org/">Node.js</a> provides a hosting environment for JavaScript that can listen for network/web requests, read from and write to the file system, talk to database engines, etc.</li>

                                    <li>Uses Google Chrome's V8 engine for fast execution</li>

                                    <li>All I/O is asynchronous so it scales incredibly well</li>
                                </ol>
                            </li>

                            <li>In databases
                                <ol>
                                    <li>CouchDB uses JavaScript for their map/reduce queries</li>
                                </ol>
                            </li>

                            <li>In some consumer electronics
                                <ol>
                                    <li>Smart televisions and other consumer electronics are starting to host JavaScript interpreters</li>
                                </ol>
                            </li>

                            <li>The JavaScript language spec defines a few core objects and methods, but each hosting environment can make additional objects and functions available that are relevant to the context</li>
                        </ol>
                    </li>
                </ol>
            </li>

            <li>Core Language Data Types and Variables
                <ol>
                    <li>Primitive types: Number, String, Boolean, Null, Undefined</li>

                    <li>Like Java, primitive types can be used implicitly with literals, or explicitly as objects
                        <ol>
                            <li>Creates a string literal and assigns it to x
                                <pre><code>
var x = &quot;Hello World!&quot;;
var len = x.length;
                                </code></pre>
                            </li>

                            <li>Creates a String object and assigns it to x
                                <pre><code>
var x = new String(&quot;Hello World!&quot;);
var len = x.length;
                                </code></pre>
                            </li>

                            <li>Results are slightly different, but not such that you would normally have to care</li>
                        </ol>
                    </li>

                    <li>Everything else is an "object," which is really just a HashTable (aka HashMap or Dictionary) of key/value pairs
                        <pre><code>
var x = {foo: &#039;bar&#039;};   //creates a new object with property &#039;foo&#039;
console.log(x.foo);     //writes &#039;bar&#039; to the log
console.log(x[&#039;foo&#039;]);  //different syntax for &#039;x.foo&#039;
x.ack = &#039;blech&#039;;        //adds prop &#039;ack&#039; with value &#039;blech&#039;
                        </code></pre>
                    </li>

                    <li>Object members (hashtable entries) can be either primitive data values, functions, arrays, or other objects</li>

                    <li>Arrays are really just specialized HashTables with numeric keys and additional built-in methods
                        <ol>
                            <li>literal assignment uses [] instead of {}</li>
                            <li>built-in <code>.length</code> property for upper-bound</li>
                            <li><a href="http://www.w3schools.com/jsref/jsref_obj_array.asp">lots of built-in functions for manipulating array contents</a> (push, pop, shift, slice, sort, etc.)</li>
                            <li>example:
                                <pre><code>
var x = [&#039;one&#039;, &#039;two&#039;, &#039;three&#039;];
console.log(x[0]);      //writes &#039;one&#039;

//loop over all items in the array
for (var i = 0; i &lt; x.length; ++i) {
    console.log(x[i]);
}
                                </code></pre>
                            </li>
                        </ol>
                    </li>

                    <li>Beyond Arrays, there are also a few other specialized built-in objects: <a href="http://www.w3schools.com/jsref/jsref_obj_date.asp">Date</a>, <a href="http://www.w3schools.com/jsref/jsref_obj_regexp.asp">RegExp</a>, <a href="http://www.w3schools.com/jsref/jsref_obj_math.asp">Math</a>, and a few Error objects that can be thrown during errors</li>

                    <li>All variables (as well as function parameters and return values) are typeless; they may hold any value of any type at any time</li>

                    <li><code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a></code> operator can determine type for the most part, but arrays are reported as objects</li>

                    <li>JavaScript has the same set of operators as Java, but they add one more that is sometimes useful: <code>===</code> or "strict equal"
                        <ol>
                            <li>Because of loose-typing, normal equality operator (<code>==</code>) will convert types when the left and right sides are not the same type</li>

                            <li>This can cause some strange behavior, especially when comparing a boolean to something else:
                                <pre><code>
var x = true;
var y = "1";
alert(x == y);      //true--boolean converted to string '1' and compared
y = "true";
alert (x == y);     //false--boolean converted to string '1', which doesn't match 'true'
                                </code></pre>
                            </li>

                            <li>The strict equal operator (<code>===</code>) does not do type conversion, and considers disparate types to be unequal</li>
                        </ol>
                    </li>
                </ol>
            </li>

            <li>Functions
                <ol>
                    <li>Like in Java or any other language, you write functions to encapsulate an algorithm so you can use it from multiple places in your code</li>

                    <li>Basic syntax is similar to Java, but no data types for parameters nor return value:
                        <pre><code>
function foo(a, b, c) {
    var ret;        //return value
    
    ...

    return ret;
}
                        </code></pre>
                    </li>

                    <li>Functions can be assigned to obects properties to create methods:
                        <pre><code>
var myobj = {x: 'hello', m: foo};
myobj.m(a, b, c);
                        </code></pre>
                    </li>
                </ol>
            </li>

            <li>JavaScript and the DOM
                <ol>
                    <li>In the early 1990s, the only way you could alter the document in script was to use <code>document.write()</code> to write new content into the page</li>

                    <li>In the mid-1990s, browser began exposing an API for manipulating the parsed, in-memory version of the document; that is, the tree of elements and their textual content</li>

                    <li>This became known as the Document Object Model (DOM) standard, and in good web fashion, every browser vendor implemented <em>most</em> of the standard, but also changed bits they didn't like</li>

                    <li>The APIs were also designed very quickly by browser developers who didn't really understand that APIs are like user interfaces for developers: they should be intuitive, consistent, and easy to use. The DOM is none of those!</li>

                    <li>This is why most developers use a wrapper library like jQuery, which abstracts away any differences, and presents a more intuitive, consistent, and easy-to-use programming interface (more on jQuery next class)</li>

                    <li>But just as it's good to know raw CSS even if you use a framework like Bootstrap, it's also good to know a bit about the raw DOM, even if you use jQuery</li>

                    <li>Top things you need to know about the DOM:
                        <ol>
                            <li>The <code>window</code> object is the "global object" and is the root object of the DOM; it also represents the current browser window</li>

                            <li>The <code>document</code> object represents the current document, and gives you methods for enumerating and getting specific elements in the document; it is also considered the root element of the document's element tree</li>

                            <li>To get a specific element by id, use <code>var elem = document.getElementById()</code> (returns a single element or null if id doesn't exist)</li>

                            <li>To get all elements with a specific style class name, use <code>var elems = document.getElementsByClassName()</code> (returns an array, which may be empty)</li>

                            <li>For a given element, you can use <code>elem.children</code> to get the child elements, <code>elem.parentNode</code> to get the parent element, and <code>elem.innerHTML</code> to alter the element's contents</li>

                            <li>Attributes are exposed as named properties (e.g., <code>elem.href</code>) and via <code>elem.getAttribute('attr-name')</code>, <code>elem.setAttribute('attr-name')</code> methods</li>

                            <li>You can create new elements via <code>document.createElement('p')</code>, and insert them into the tree via <code>elem.appendChild()</code> or <code>elem.insertBefore()</code></li>

                            <li>You can also remove elements via <code>elem.removeChild()</code>, or replace an element using <code>elem.replaceChild()</code></li>
                        </ol>
                    </li>

                </ol>
            </li>

            <li>Debugging JavaScript in the Browser
                <ol>
                    <li>Just as with CSS, errors in your JavaScript will just cause the script to fail without any visible warning to the reader; to see these errors, use the Developer Tools in Chrome/Safari/IE, or the Firebug add-on in Firefox</li>

                    <li>These tools also allow you to set breakpoints and step through your code, just like a Java debugger</li>
                </ol>
            </li>



        </ol> <!-- lecture -->

    </div> <!-- .container -->

</body>
</html>