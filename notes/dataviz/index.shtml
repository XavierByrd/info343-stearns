<!doctype html>
<html lang="en">
<head>
    <!--#include virtual="../inc/common-head.html" -->
    <meta name="description" content="Notes for Data Visualization in the Web Lecture">
    <title>Data Visualization Web Applications</title>
</head>
<body>

    <div class="container">

        <!--#include virtual="../inc/crumbtrail.html" -->
            
        <div class="page-header notes-header">
            <h1>Data Analysis and Visualization Applications</h1>
            <p class="lead">Dr David Stearns, Autumn 2013</p>
        </div>

        <ol class="lecture-outline">
            <li>Coming Up...
                <ol>
                    <li>Thurs, Nov 21: Data Visualization, Part II
                        <ol>
                            <li><em>please read:</em></li>
                            <li><a href="http://d3js.org/">Intro to D3</a></li>
                            <li><a href="http://bost.ocks.org/mike/bar/">D3 Bar Chart Tutorial</a></li>
                        </ol>
                    </li>
                    <li>Fri, Nov 22: Data Visualization with D3 Lab
                    </li>
                </ol>
            </li>

            <li>Today
                <ol>
                    <li>Debrief Lab 8</li>
                    <li>Check in on Homework v4.0</li>
                    <li>Check in on Final Projects</li>
                    <li>Transactional Apps Recap: Free and Easy Cloud Storage using Parse.com</li>
                    <li>Drawing in the Browser: SVG and the Canvas Element</li>
                    <li>Simple Charting with the Chart.js library</li>
                </ol>
            </li>

            <li>In-Class Coding Repository
                <ol>
                    <li><a href="https://github.com/drstearns/in-class-code-a">Section A (8:30)</a></li>
                    <li><a href="https://github.com/drstearns/in-class-code-b">Section B (10:30)</a></li>
                </ol>
            </li>

            <li>Transactional App Data Storage using Parse.com
                <ol>
                    <li>Our Task List application didn't save the task list anywhere, but a real transactional app would need to persist the data somewhere, preferably on a server so that it would be accessible from everywhere</li>

                    <li>Traditionally, a transactional app would also require developing some code on the server-side:
                        <ol>
                            <li>PHP script or CGI program to respond to GET and POST requests</li>

                            <li>Relational database for storing and querying the structured data</li>

                            <li>Traditional server-side stack was known as LAMP: Linux (OS), Apache (web server), MySql (relational database), and PHP or Python or Perl (script responding to GET and POST web requests)</li>

                            <li>New options such as Node.js have surfaced in recent years to replace Apache and PHP/Perl/Python</li>
                        </ol>
                    </li>

                    <li>But with the establishment of cloud computing techniques, new services have sprung up that can do all of this for you in a generic way so that <em>you don't have to write any server-side code at all</em></li>

                    <li>Both Amazon S3 and Google Cloud Storage provide these services</li>

                    <li>A relatively new and very well-designed storage service is <a href="https://parse.com/">Parse.com</a>
                        <ol>
                            <li>Built on top of Amazon's S3 cloud infrastructure and Backbone.js's MVC architecture</li>

                            <li>Adds user accounts, authentication, and access control (security)</li>

                            <li>Allows persistence and querying of related, linked objects (e.g., order with order line items)</li>
                        </ol>
                    </li>

                    <li>Demo! The Task List on Parse.com</li>

                </ol>
            </li>

            <li>Drawing in the Browser
                <ol>
                    <li>Data visualizations require the ability to draw things like lines, curves, rectangles, points, circles, and polygons directly to the screen</li>

                    <li>Two ways to do this now: the <code>&lt;canvas&gt;</code> element and SVG</li>

                    <li>The <code>&lt;<a href="http://www.w3schools.com/tags/ref_canvas.asp">canvas</a>&gt;</code> element
                        <ol>
                            <li>New to HTML 5, but widely supported</li>

                            <li>General drawing surface that is more like an operating system window than a document element</li>

                            <li>Drawing accomplished through <a href="http://www.w3schools.com/tags/ref_canvas.asp">JavaScript API</a> only, not through additional tags</li>

                            <li>Both geometry and aesthetic styling is done entirely through code; can't use CSS because there are no child elements to select</li>

                            <li>Since there are no elements inside, you have to do your own hit testing to figure out what the user clicks on or hovers over</li>

                            <li>Higher performance and more memory efficient than SVG, but much harder to manipulate, animate, or interact with</li>

                            <li>Script can get the current image data as a base-64 encoded string, so you can save the results of your drawing and reload it again later</li>
                        </ol>
                    </li>

                    <li><a href="http://www.w3schools.com/svg/svg_intro.asp">Scalable Vector Graphics (SVG)</a>
                        <ol>
                            <li>Uses child elements to specify shapes and text that should be drawn inside the containing <code>&lt;svg&gt;</code> element</li>

                            <li>Child elements represent shapes, lines, curves, text, etc.</li>

                            <li>Child elements, like other document elements, can have style class names and ids</li>

                            <li>Geometry of child elements is specified via attributes, but aesthetics (colors, borders, etc.) can be specified via CSS</li>

                            <li>Because they are elements, you can refer to them in script, manipulate them, and respond to events triggered by them (e.g., click, hover)</li>

                            <li>Tends to use more memory than <code>&lt;canvas&gt;</code>, but you can embed some or all of your drawing content directly in the document, and manipulate it the same way you'd manipulate other parts of the document</li>

                            <li>Not as good support on older mobile browsers (iOS 5+ and Android 3+), but this is quickly becoming a non-issue</li>

                        </ol>
                    </li>

                    <li>Demo! Simple Canvas and SVG drawing</li>

                </ol>
            </li>

            <li>Simple Charting with <a href="http://www.chartjs.org/">Chart.js</a>
                <ol>
                    <li>You could create basic charts using the canvas API or SVG elements directly, but there are a few JavaScript libraries that make this much, much easier to do</li>

                    <li>For simple bar, line, radar, pie, and doughnut charts, use a library like  <a href="http://www.chartjs.org/">Chart.js</a></li>

                    <li><a href="http://www.chartjs.org/docs/">Code to create these kinds of charts</a> is <em>very</em> simple, but dataset must be arranged in a specific structure defined by the library</li>

                    <li>Uses the <code>&lt;canvas&gt;</code> element, so they are quick and memory efficient, but do not yet offer any kind of interactivity besides basic build animations</li>

                    <li>Lots of control over appearance of labels, grid lines, data points, etc., but titles and legends have to be placed outside the <code>&lt;canvas&gt;</code> or drawn on via your own code</li>

                    <li>Demo! Simple charting via Chart.js</li>
                </ol>
            </li>


        </ol> <!-- lecture -->

    </div> <!-- .container -->

</body>
</html>
