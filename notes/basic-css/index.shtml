<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Notes for Adding Some Style Lecture">
    <meta name="author" content="David Stearns">
    <link rel="shortcut icon" href="https://ischool.uw.edu/favicon-small.png">

    <title>Adding Some Style: Intro to CSS 3</title>

    <link rel="stylesheet" href="../../lib/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/notes.css">

</head>
<body>

    <div class="container">

    <!--#include virtual="../inc/crumbtrail.html" -->
        
    <div class="page-header notes-header">
        <h1>Adding Some Style: Intro to CSS 3</h1>
        <p class="lead">Dr David Stearns, Autumn 2013</p>    
    </div>

    <ol class="lecture-outline">
        <li>Introduction
            <ol>
                <li>In our last class, we learned that HTML is for encoding meaning into otherwise plain text, and CSS is for specifying how those semantics should actually appear on screen</li>

                <li>Today we'll dive into CSS and learn how to alter the appearance of boxes, text, links, lists, and tables</li>

                <li>But we'll also learn a bit about graphic design in general; CSS lets you do anything you want, so its up to you to use it <em>tastefully</em></li>

                <li>If we have time, we'll also get into page layout, but we'll wait to talk about advanced and responsive layouts until next week.</li>

            </ol>
        </li>

        <li>Basic Graphic Design Principles
            <ol>
                <li>Color
                    <ol>
                        <li>Unless you are confident as a graphic artist, use one of the thousands of <a href="http://www.colourlovers.com/palettes">color palettes</a> <a href="https://kuler.adobe.com/explore/newest/">already defined</a> by talented graphic designers.</li>
                        
                        <li>In general, you use one color for headlines; one color for body text; one or two colors for backgrounds; and one or two accent colors that stand out compared to the others. Backgrounds and body text can also be reversed.</li>
                        
                        <li>The meaning and appropriate use of color is cultural: some cultures favor stark, simple and clean colors, while others prefer bold, saturated, and dynamic colors. Use colors that are appropriate for your target audience. Look at sites they are already frequenting.</li>
                    </ol>
                </li>
                <li>Typography
                    <ol>
                        <li>Two basic categories of fonts: serif and sans-serif</li>
                        <li>The former is generally better for screens, while the latter can be better for print</li>
                        <li>Sans-Serif is generally good for headings if using serifed font in body</li>
                        <li>Browsers guarantee something for 'serif' and 'sans-serif'; Helvetica and Arial are also pretty safe</li>
                        <li>Other fonts are not guaranteed (esp. on Linux clients), so it's best to be explicit and use a custom font</li>
                        <li><a href="http://www.google.com/fonts">Google Fonts</a> is an easy source for free, custom fonts</li>
                    </ol>
                </li>
                <li>Whitespace
                    <ol>
                        <li>Graphic whitespace is like resting in music; if you never stop playing, it gets monotonous</li>
                        
                        <li>A healthy use of whitespace will draw attention to what really matters on the page; set off what's important from the details</li>

                        <li>Browsers have an inconsistent amount of default whitespace, so it's best to use a <a href="http://meyerweb.com/eric/tools/css/reset/">reset CSS block</a> to reset all defaults back to zero, and then define your own margins and padding from there.</li>
                    </ol>
                </li>
                <li>Graphics
                    <ol>
                        <li>Icons
                            <ol>
                                <li>Icons can help users understand the meaning of something, or help them find what they are looking for quickly</li>
                                <li>Lots of <a href="https://www.iconfinder.com/">free icon libraries</a> out there.</li>
                            </ol>
                        </li>
                        <li>Background textures and images
                            <ol>
                                <li><a href="http://subtlepatterns.com/">Subtle background textures</a> add depth and interest, but make sure you can still read the text!</li>
                                <li>Use overlays or opaque boxes on top of richly colored backgrounds (I'll show you that later)</li>
                            </ol>
                        </li>

                        <li>Featured images
                            <ol>
                                <li>People are drawn to high-quality images so use them to pull their eyes toward important parts of the page</li>
                                
                                <li>Picture style says a lot about your site&mdash;hire a pro and talk about how you want people to feel when they look at your featured images</li>

                                <li>Or buy some stock photography if you find something that fits your aesthetic</li>
                            </ol>
                        </li>
                    </ol>
                </li>
                <li>Layout
                    <ol>
                        <li>Readers tend to scan pages by looking across the top, and then down the left side of the page, so put your important stuff there, especially site navigation</li>

                        <li>Commonly, site-wide nav goes across the top, while sub or page-level nav goes on the left, or occasionally right side</li>
                        
                        <li>Follow conventions established by leading sites in your general arena</li>
                    </ol>
                </li>
            </ol>
        </li>

        <li>Element Sub-Classes
            <ol>
                <li>HTML elements encode meaning, but sometimes you need to define a few subtle shades of that meaning</li>
                
                <li>For example, a <code>&lt;p&gt;</code> element denotes a paragraph, but you might need to make a distinction between a paragraph containing normal text, and a paragraph containing the name of a company, or a copyright declaration, or whatever; in essence, you want to define a sub-class of paragraph</li>

                <li>Furthermore, the set of HTML elements is limited, and you may find yourself wanting to mark a block or run of text as having a meaning other than one of the built-in HTML semantics (e.g., the name of a software program, an organizational motto, a customer name, etc.)</li>

                <li>HTML provides three things that help you do both of these:
                    <ol>
                        <li>a <code>class</code> attribute, which can be added to any HTML element to specify its sub-class</li>

                        <li>the <code>&lt;div class=&quot;...class...&quot;&gt;</code> element, which can be used to mark a block of content that has a meaning other than one of the built-in HTML block elements</li>

                        <li>the <code>&lt;span class=&quot;...class...&quot;&gt;</code> element, which can be used to mark a run of content that has a meaning other than one of the built-in HTML phrasing elements</li>

                        <li>Although most browsers will let you use non-standard elements (e.g., <code>&lt;customer&gt;</code>), the HTML 5 spec prohibits that, and validation tools will consider that an error; it's also a dangerous practice, as the W3C may decide to define a new element by that name in the future, but assign it a different meaning</li>
                    </ol>
                </li>

                <li>Once you've assigned a style class to an element, you can then provide specific formatting instructions for that class in your CSS; this is the generally preferred way to specify formatting rules that apply to only some elements of a given type</li>

                <li>Note that you can assign more than one class to an element; when you do so, the element conceptually belongs to both classes, and browsers will apply both sets of formatting instructions (in the order they are defined).</li>

                <li>You can also refer to all elements of that class in your scripts (more on that later in the course)</li>
            </ol>
        </li>

        <li>Three Ways of Adding Styles
            <ol>
                <li>External Style Sheet(s)
                    <ol>
                        <li>Generally the best option, as it keeps styles in a separate file from semantic HTML</li>
                        
                        <li>Site formatting is defined in only one place, making it easy to change and keep consistent (DRY principle)</li>

                        <li>Establishes separate domains for designers vs developers</li>
                        
                        <li>Pages can include multiple style sheets, enabling you to break less-used styles into separate, optional files</li>
                        
                        <li>Pages link to style sheets using <code>&lt;link&gt;</code> tag in <code>&lt;head&gt;</code>
                            <pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;</code></pre>
                        </li>

                        <li>External style sheets typically go in a <code>css/</code> sub-directory</li>

                        <li>Style sheets from third-party CSS frameworks typically go in <code>lib/</code> sub-directory</li>
                    </ol>
                </li>

                <li>Internal Style Block
                    <ol>
                        <li>Useful for pages that are meant to travel (e.g., HTML email) or be viewed off-line from the local file system; since styles are in the same file, no network access needed</li>

                        <li>Specified in <code>&lt;style&gt;</code> element in <code>&lt;head&gt;</code> section
                            <pre><code>&lt;head&gt;
    ...other head tags...
    &lt;style&gt;
        ...style rules go here...    
    &lt;/style&gt;
&lt;/head&gt;</code></pre>
                        </li>

                    </ol>
                </li>

                <li>Individual Element Style
                    <ol>
                        <li>Avoid this if you can; use only as a last resort!</li>
                        
                        <li>Specified in <code>style</code> attribute of the element
                            <pre><code>&lt;p style=&quot;font-family: &#039;Times New Roman&#039;;&quot;&gt;...&lt;/p&gt;</code></pre>
                        </li>
                        
                        <li>Value contains only property/value declarations that are directly applied to the element; no selector needed.</li>

                        <li>Almost impossible to manage in a large project</li>
                    </ol>
                </li>
            </ol>
        </li>

        <li>CSS Syntax
            <ol>
                <li>Expressed as a set of rules</li>

                <li>Each rule starts with one or more selectors, which define what the rule applies to</li>

                <li>Followed by one or more property/value declarations, each ending with a semi-colon, which provide specific formatting instructions:
<pre><code>body {
    font-family: Helvetica, Arial, sans-serif;
    font-size: 16px;
}</code></pre>
                </li>

            </ol>
        </li>

        <li>CSS Selectors
            <ol>
                <li>There are many, many types of selectors, but most projects only require a few of them. I'll show you those, and you can refer to the <a href="http://www.w3schools.com/cssref/css_selectors.asp">w3cschools CSS selector reference</a> for a full list.</li>

                <li>Basic Selectors
                    <ol>
                        <li>Element selectors
<pre><code>/* applies to all &lt;p&gt; elements */
p {...}</code></pre>
                        </li>
                        
                        <li>Class selectors
<pre><code>/* applies to all elements with class="motto" */
.motto {...}

/* applies only to &lt;p&gt; elements with class="motto" */
p.motto {...}</code></pre>
                        </li>
                        
                        <li>Attribute selectors
<pre><code>/* applies to all &lt;a&gt; elements with target="_blank"
a[target='_blank'] {}</code></pre>
                        </li>
                    </ol>
                </li>

                <li>Group Selectors: comma-delimited list of selectors; styles apply to all in list
<pre><code>/* applies to all h1s, h2s, h3s, and h4s */
h1, h2, h3, h4 {...}
</code></pre>                    
                </li>

                <li>Descendant and Child selectors
                    <ol>
                        <li>Useful for applying styles to elements within a region of the page; wrap these in a div with a particular class</li>

                        <li>Descendant selector
<pre><code>/* applies to all p elements 
within an element with class "news" */
.news p {...}

/* can nest to several levels
applies to all elements of class "ack"
that are within elements of class "bar"
that are within elements of class "foo" */
.foo .bar .ack {...}</code></pre>
                        </li>

                        <li>Child selector
<pre><code>/* occasionally, you want to apply styles
only to elements that are immediate children of
other elements, as opposed to descendants
farther down the tree
applies only to top-level p tags within the body */
body > p {...}</code></pre>
                        </li>
                    </ol>
                </li>

                <li>Psuedo selectors
                    <ol>
                        <li>Hyperlink pseudo selectors
<pre><code>/* applies to links the user is hovering over */
a:hover {...}

/* applies to links the user has already visited */
a:visited {...}

/* applies to links the user has not already visited */
a:link {...}

/* applies to links the user is actively selecting */
a:active {...}

/* applies to links that have keyboard focus */
a:focus {...}</code></pre>
                        </li>
                        
                        <li>Child pseudo selectors
<pre><code>/* applies to the first &lt;p&gt; in the &lt;body&gt; */
body > p:first-of-type {...}

/* applies to the last &lt;p&gt; in the &lt;body&gt; */
body > p:last-of-type {...}

/* applies to even rows in a table 
(useful for striping rows) */
table tr:nth-of-type(even) {...}</code></pre>
                        </li>
                        
                        <li>Text pseudo selectors
<pre><code>/* applies to the first line of each paragraph */
p:first-line {...}

/* applies to first letter of the first paragraph 
(e.g., for a drop-cap effect) */
body > p:first-of-type:first-letter {...}
</code></pre>
                        </li>
                    </ol>
                </li>

            </ol>
        </li>

        <li>CSS Units
            <ol>
                <li>Numerical units
                    <ol>
                        <li>pixels (px), ems (em, rem), and percentages (%) work best for screens</li>
                        
                        <li>can also use points, picas, inches, centimeters, or millimeters</li>

                        <li>Relative sizes (em, %) are relative to parent, not overall page; rem is absolute to body</li>
                    </ol>
                </li>

                <li>Colors
                    <ol>
                        <li>RGB (Red Green Blue): rgb(255,0,255);</li>
                        
                        <li>Hex (RGB in hex form): #FF00FF</li>
                        
                        <li>RGBA (RGB plus alpha transparency): rgba(255,0,255,0.5) </li>
                        
                        <li>HSL (Hue Saturation Lightness): hsl(300,100%, 50%)</li>
                    </ol>
                </li>
            </ol>
        </li>

        <li><a href="../../examples/css-examples/boxes.html">Styling Boxes</a></li>

        <li><a href="../../examples/css-examples/text.html">Styling Text</a></li>

        <li><a href="../../examples/css-examples/links.html">Styling Links</a></li>        

        <li><a href="../../examples/css-examples/lists.html">Styling Lists</a></li>

        <li><a href="../../examples/css-examples/tables.html">Styling Tables</a></li>

        <li>Inheritance and the Cascade
            <ol>
                <li>Inheritance
                    <ol>
                        <li>Most style attributes are inherited from parent elements, but some are not for obvious reasons (strong doesn't inherit font-weight from parent; it overrides that prop)</li>

                        <li>Thus, it's generally good to specify your styles at the highest level that makes sense</li>

                        <li>For example, specify font-family on body if nearly all text should use that font</li>

                        <li>Or specify background color on tr instead of td, even though tr doesn't really have its own visible content</li>
                    </ol>
                </li>

                <li>The Cascade
                    <ol>
                        <li>So what happens when there are multiple style rules that could apply to the same elements?</li>
                        
                        <li>Style settings are accumulated if they don't conflict</li>
                        
                        <li>If they do conflict, the order in which the rules are declared, and the specificity of the selector determine who wins</li>

                        <li>If selectors are equally specific, last-one-defined wins (rule nearest the element)</li>

                        <li>If selectors are not equally specific, most-specific wins (calculated using a point system)
                            <ol>
                                <li>Element selector worth 1 point</li>
                                <li>Class selector worth 10 points</li>
                                <li>ID selector (don't use) worth 100 points</li>
                                <li>Inline styles in <code>style</code> attribute worth 1000 points (<code>style</code> attr always wins, but don't use it)</li>

                                <li>Add up all points for all types of selectors used in selector expression</li>
                                <li>In general, use class and element selectors for most rules</li>
                            </ol>
                        </li>

                    </ol>
                </li>

                
            </ol>
        </li>

    </ol>

    </div> <!-- .container -->

    
</body>
</html>