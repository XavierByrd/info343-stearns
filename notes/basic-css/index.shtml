<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Notes for Adding Some Style Lecture">
    <meta name="author" content="David Stearns">
    <link rel="shortcut icon" href="https://ischool.uw.edu/favicon-small.png">

    <title>Adding Some Style: Intro to CSS 3</title>

    <link rel="stylesheet" href="../../lib/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/notes.css">

</head>
<body>

    <div class="container">

    <!--#include virtual="../inc/crumbtrail.html" -->
        
    <div class="page-header notes-header">
        <h1>Adding Some Style: Intro to CSS 3</h1>
        <p class="lead">Dr David Stearns, Autumn 2013</p>    
    </div>

    <ol class="lecture-outline">
        <li>Introduction
            <ol>
                <li>In our last class, we learned that HTML is for encoding meaning into otherwise plain text, and CSS is for specifying how those semantics should actually appear on screen</li>

                <li>Today we'll dive into CSS and learn how to alter the appearance of text, lists, links, boxes, and tables</li>

                <li>But we'll also learn a bit about graphic design in general; CSS lets you do anything you want, so its up to you to use it <em>tastefully</em></li>

                <li>We'll touch on page layout when we discuss design principles, but we'll wait to cover page layout in CSS until next week, as it can get pretty complicated</li>
            </ol>
        </li>

        <li>Basic Graphic Design Principles
            <ol>
                <li>Color
                </li>
                <li>Typography
                </li>
                <li>Whitespace
                </li>
                <li>Layout
                </li>
            </ol>
        </li>

        <li>Element Sub-Classes
            <ol>
                <li>HTML elements encode meaning, but sometimes you need to define a few subtle shades of that meaning</li>
                
                <li>For example, a <code>&lt;p&gt;</code> element denotes a paragraph, but you might need to make a distinction between a paragraph containing normal text, and a paragraph containing the name of a company, or a copyright declaration, or whatever; in essence, you want to define a sub-class of paragraph</li>

                <li>Furthermore, the set of HTML elements is limited, and you may find yourself wanting to mark a block or run of text as having a meaning other than one of the built-in HTML semantics (e.g., the name of a software program, an organizational motto, a customer name, etc.)</li>

                <li>HTML provides three things that help you do both of these:
                    <ol>
                        <li>a <code>class</code> attribute, which can be added to any HTML element to specify its sub-class</li>

                        <li>the <code>&lt;div class=&quot;...class...&quot;&gt;</code> element, which can be used to mark a block of content that has a meaning other than one of the built-in HTML block elements</li>

                        <li>the <code>&lt;span class=&quot;...class...&quot;&gt;</code> element, which can be used to make a run of content that has a meaning other than one of the built-in HTML phrasing elements</li>

                        <li>Although most browsers will let you use non-standard elements (e.g., <code>&lt;customer&gt;</code>, the HTML 5 spec prohibits that, and validation tools will consider that an error; it's also a dangerous practice, as the W3C may decide to define a new element by that name in the future, but assign it a different meaning</li>
                    </ol>
                </li>

                <li>Once you've assigned a style class to an element, you can then provide specific formatting instructions for that class in your CSS</li>

                <li>You can also refer to all elements of that class in your scripts (more on that later in the course)</li>
            </ol>
        </li>

        <li>Three Ways of Adding Styles
            <ol>
                <li>External Style Sheet(s)
                    <ol>
                        <li>Generally the best option, as it keeps styles in a separate file from semantic HTML</li>
                        
                        <li>Site formatting is defined in only one place, making it easy to change and keep consistent (DRY principle)</li>

                        <li>Establishes separate domains for designers vs developers</li>
                        
                        <li>Pages can include multiple style sheets, enabling you to break less-used styles into separate, optional files</li>
                        
                        <li>Pages link to style sheets using <code>&lt;link&gt;</code> tag in <code>&lt;head&gt;</code>
                            <pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;</code></pre>
                        </li>

                        <li>External style sheets typically go in a <code>css/</code> sub-directory</li>

                        <li>Style sheets from third-party CSS frameworks typically go in <code>lib/</code> sub-directory</li>
                    </ol>
                </li>

                <li>Internal Style Block
                    <ol>
                        <li>Useful for pages that are meant to travel (e.g., HTML email) or be viewed off-line from the local file system; since styles are in the same file, no network access needed</li>

                        <li>Specified in <code>&lt;style&gt;</code> element in <code>&lt;head&gt;</code> section
                            <pre><code>&lt;head&gt;
    ...other head tags...
    &lt;style&gt;
        ...style rules go here...    
    &lt;/style&gt;
&lt;/head&gt;</code></pre>
                        </li>

                    </ol>
                </li>

                <li>Individual Element Style
                    <ol>
                        <li>Avoid this if you can; use only as a last resort!</li>
                        <li>Specified in <code>style</code> attribute of the element
                            <pre><code>&lt;p style=&quot;font-family: &#039;Times New Roman&#039;;&quot;&gt;...&lt;/p&gt;</code></pre>
                        </li>
                        <li>Value contains only property/value declarations that are directly applied to the element; no selector needed.</li>
                    </ol>
                </li>
            </ol>
        </li>

        <li>CSS Syntax
            <ol>
                <li>Expressed as a set of rules</li>
                <li>Each rule starts with one or more selectors, which define what the rule applies to</li>
                <li>Followed by one or more property/value declarations, each ending with a semi-colon, which provide specific formatting instructions:
                    <pre><code>body 
{
    font-family: Helvetica, Arial, sans-serif;
}</code></pre>
                </li>

            </ol>
        </li>

        <li>CSS Selectors
            <ol>
                <li>Following are the most commonly-used selectors; for a full list of possible selectors, see the w3schools <a href="http://www.w3schools.com/cssref/css_selectors.asp">selector reference</a></li>

                <li>Element selectors
                    <pre><code>/* applies to all &#039;p&#039; elements */
p {...}</code></pre>
                </li>

                <li>Class selectors
                    <pre><code>/* applies to all elements with class=&quot;motto&quot; */
.motto {...}</code></pre>
                </li>

                <li>Combo element and class selector
                    <pre><code>/* applies to all &lt;p class=&quot;motto&quot;&gt; elements */
p.motto {...}</code></pre>
                </li>

                <li>ID selectors
                    <pre><code>/* applies to the element with id=&quot;foo&quot; */
#foo {...}</code></pre>
                </li>

                <li>Attribute selectors
<pre><code>/* applies to all &lt;p lang=&quot;es&quot;&gt; elements */
p[lang=es] {...}

/* applies to all &lt;a&gt; elements whose  
href attribute starts with &quot;http&quot; */
a[href^=&quot;http&quot;]

/* applies to all a elements whose
href attribute ends with &quot;.pdf&quot; */
a[href$=".pdf"] {...}

/* applies to all &lt;img&gt; elements whose src
attribute contains the characters &#039;flickr.com&#039; */
img[src*="flickr.com"] {...}</code></pre>
                </li>

                <li>Group selectors (multiple selectors separated by comma)
                    <pre><code>/* applies to all h1-4 elements */
h1, h2, h3, h4 {...}</code></pre>
                </li>

                <li>Descendant selectors
<pre><code>/* applies to all &lt;p&gt; elements that inside 
elements with class=&quot;news&quot; but not to other &lt;p&gt; elements 
elsewhere in the page */
.news p {...}

/* applies to all elements with class=&quot;foo&quot; that are descendants 
of elements with class=&quot;bar&quot; that are descendants of elements 
with class=&quot;ack&quot; */
.ack .bar .foo {...}</code></pre>
                </li>

                <li>Child selectors
<pre><code>/* applies to  all &lt;li&gt; elements that are immediate children 
of &lt;ol&gt; elements as opposed to those that might be 
descendants deeper down the tree */
ol&gt;li {...}
</code></pre>
                </li>

                <li>Next Sibling selector
<pre><code>/* applies to all &lt;p&gt; elements immediately following 
a &lt;blockquote&gt; element, but not other &lt;p&gt; elements */
blockquote+p {...}
</code></pre>
                </li>

                <li>Previous sibling selector
<pre><code>/* selects all &lt;ul&gt; elements that have a
&lt;p&gt; element for a previous sibling, even if other
elements are in between */
p~ul {...}</code></pre>
                </li>

                <li>Child pseudo selectors
<pre><code>/* applies to the first &lt;p&gt; in the &lt;body&gt; */
body>p:first-of-type {...}

/* applies to the last &lt;p&gt; in the &lt;body&gt; */
body>p:last-of-type {...}

/* applies to every other table row 
(useful for striping rows) */
table tr:nth-of-type(2) {...}</code></pre>
                </li>

                <li>Hyperlink pseudo selectors
<pre><code>/* applies to links the user is hovering over */
a:hover {...}

/* applies to links the user has already visited */
a:visited {...}

/* applies to links the user has not already visited */
a:link {...}

/* applies to links the user is actively selecting */
a:active {...}</code></pre>
                </li>

                <li>Text pseudo selectors
<pre><code>/* applies to the first line of each paragraph */
p:first-line {...}

/* applies to first letter of the first paragraph 
(e.g., for a drop-cap effect) */
p:first-child:first-letter {...}
</code></pre>
                </li>

            </ol>
        </li>

        <li>CSS Units
            <ol>
                <li>Numerical units
                    <ol>
                        <li>pixels (px), ems (em), and percentages (%) work best for screens</li>
                        <li>can also use points, picas, inches, centimeters, or millimeters</li>
                    </ol>
                </li>

                <li>Colors
                    <ol>
                        <li>RGB (Red Green Blue): rgb(255,0,255);</li>
                        <li>Hex (RGB in hex form): #FF00FF</li>
                        <li>RGBA (RGB plus alpha transparency): rgba(255,0,255,0.5) </li>
                        <li>HSL (Hue Saturation Lightness): hsl(354,100%, 50%)</li>
                    </ol>
                </li>
            </ol>
        </li>

        <li>Styling Text
            <ol>
                <li>font-family = name of font</li>
                <li>font-size = size of characters</li>
                <li>font-style = normal, italic, oblique</li>
                <li>font-variant = small-caps</li>
                <li>font-weight = bold or 100-900</li>
            </ol>
        </li>

        <li>Styling Lists
        </li>

        <li>Styling Links
        </li>        

        <li>Styling Boxes
        </li>

        <li>Styling Tables
        </li>

        <li>Inheritance and the Cascade
        </li>

    </ol>

    </div> <!-- .container -->

    
</body>
</html>