<!doctype html>
<html>
    <head>
        <!--#include virtual="../inc/common-head.html" -->

        <meta name="description" content="INFO 343 Bootstrap Lab">
        <title>Lab 4: Bootstrap</title>
    </head>
    <body>
        <div class="container">

            <!--#include virtual="../inc/crumbtrail.html" -->

            <article class="lab">

                <section id="intro">
                    <div class="page-header lab-title">
                        <h1>Lab 4: Building a Site with Bootstrap</h1>
                        <p class="lead">CSS Frameworks and Responsive Design</p>
                    </div>

                    <p>In class this week we learned about complex page layouts, responsive web design, and CSS frameworks. In this lab, we will practice those skills by building a page using one of the more popular CSS frameworks out there: Bootstrap, brought to you by the good folks at Twitter.</p>

                    <h2>General Instructions</h2>
                    <ol>
                        <li>If you get stuck at any point, search the Internet, ask your neighbor, or ask the TA for help.</li>

                        <li>At the end of the lab, submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288921">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299189">Section B</a>).</li>

                        <li>If you don't finish all the required tasks during our lab time, finish them over the weekend and submit your published site URL before 8:00am on Monday morning.</li>

                        <li>If you finish all the required steps, go on and try some of the <a href="#optional-steps">optional ones</a>. Remember that you have to do at least one of the optional steps in order to get 10/10 on the Completeness portion of your grade. If you do only the required steps, you'll get 9/10 on that portion.</li>
                    </ol>

                    <h2>Required Steps</h2>
                    <ol>
                        <li><a href="#fork">Fork my lab4 repository and clone to your lab machine</a></li>

                        <li><a href="#pages">Build and Style the HTML Page</a></li>

                        <li><a href="#github">Stage, Commit, and Push to GitHub</a></li>

                        <li><a href="#submit">Publish your site to your web hosting server and submit the site URL via Canvas</a></li>
                    </ol>
                </section>

                <section id="fork">
                    <h2>Fork and Clone</h2>

                    <p>First, go to <a href="https://github.com" target="_blank">GitHub</a> and sign into your account.</p>

                    <p>Next, go to my <a href="https://github.com/drstearns/lab4" target="_blank">lab4 repository on GitHub</a>, and fork it. You did this in our previous lab, but in case you forgot how to do so, click the "Fork" button at the top-right of the page and follow any instructions you receive. This will create a copy of this repository in your own account so that you have something to start with. The repository contains the images and other file stubs you'll need.</p>

                    <p>Once you've forked the repository, clone it to your local lab machine using SourceTree. We've done this a few times now, but if you've forgotten how, follow these steps:</p>

                    <ol>
                        <li>In <strong>your forked lab4 repository</strong> (not my original one) on the GitHub site, copy the 'HTTPS Clone URL' on the right side of the screen</li>
                        <li>Run the SourceTree app</li>
                        <li>Click on the Clone/New button in the upper-left of the screen</li>
                        <li>Enter the GitHub HTTPS clone URL you copied into the Source URL box</li>
                        <li>Hit tab, and SourceTree will automatically populate the Destination Path for you (usually a new folder named after your repository in the My Documents folder)</li>
                        <li>Click the 'Clone' button to clone the GitHub repository to your local machine</li>
                        <li>If you get stuck, as your TA or a neighbor for help</li>
                    </ol>
                </section>

                <section id="pages">
                    <h2>Build and Style the Page</h2>

                    <p>Today we'll be building the home page for the <a href="http://www.nbc.com/parks-and-recreation/">City of Pawnee Parks Department</a>. They want a page that shows off their beautiful city parks, but still looks good on smaller mobile devices. Bootstrap is designed to make this kind of things relatively easy, so we'll use Bootstrap to build this.</p>

                    <p>I'll take you through building such a page step-by-step, but first let's see the kind of page we're trying to build. This is how it will look on your desktop monitors: the page has a carousel across the top, and a three-column layout with content below that.</p>

                    <p><img class="screen-shot img-responsive" src="img/desktop.png" alt="desktop monitor screen shot"></p>

                    <p>And this is what it should look like when you've resized your browser window down to the size of a tablet-sized device&mdash;note how the three-column layout below the carousel has now become a one-column layout, with the various sections stacked on top of one another, and the carousel has scaled down appropriately:</p>

                    <p><img class="screen-shot img-responsive" src="img/tablet.png" alt="tablet screen shot"></p>

                    <p>And finally, this is what it will look like when you've resized your browser down to the size of a phone screen&mdash;note how the carousel has scaled down even further:</p>

                    <p><img class="screen-shot img-responsive" src="img/phone.png" alt="phone screen shot"></p>

                    <p class="alert alert-info">If you have time or want the extra challenge, do the optional step of <a href="#navbar">adding the responsive Bootstrap navbar</a>. This component looks like a normal navbar on desktop and tablet devices, but becomes a drop-down menu on phone screens.</p>

                    <p>Let's build this up, step-by-step.</p>

                    <h3>Basic Page Structure and Head Section</h3>

                    <p>Create a file named 'index.html' in your project's root folder. Add the standard HTML 5 doctype, as well as the required <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements.</p>

                    <p>In the <code>&lt;head&gt;</code> section, we need to add the same sort of elements we've added in previous labs, but we also need to link to Bootstrap's minified stylesheet in addition to our own. Order matters in these stylesheet links; those that appear later in the page source can override styles defined in those that appear earlier, so we want to add Bootstrap first, and then our own. Most of the styles we'll use will come from Bootstrap, but we'll want to define a couple of our own.</p>

                    <p>In order to make this look great on phone screens, we also need to add an extra <code>&lt;meta&gt;</code> element that tells the mobile browser how to setup the initial viewport. This is done by setting <code>name="viewport"</code> and <code>content="width=device-width, initial-scale=1.0"</code>. The first part of the content tells the mobile browser to use the entire screen width for the viewport, and the second part tells it to set the initial scaling factor to 1.0, which is like saying "don't zoom out by default."</p>

                    <p>Your <code>&lt;head&gt;</code> section should look like this:</p>

                    <pre><code>
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;description&quot; content=&quot;City of Pawnee Parks Department Home Page&quot;&gt;
    &lt;meta name=&quot;author&quot; content=&quot;<span class="token">your-net-id</span>&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; 
    &lt;link rel=&quot;shortcut icon&quot; href=&quot;img/logo.png&quot;&gt;
    &lt;title&gt;Pawnee Parks Department&lt;/title&gt;
    
    &lt;!-- hot link to Bootstrap stylesheet --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;&gt;

    &lt;!-- our own stylesheet for overrides --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;
&lt;/head&gt;
                    </code></pre>

                    <h3>Add the Bootstrap JavaScript Links</h3>

                    <p>The interactive components in Bootstrap also require their JavaScript file, and their JavaScript file depends upon the jQuery library, so we need to add both to our page.</p>

                    <p>We haven't gotten to writing JavaScript yet, but adding a JavaScript file someone else has written already is easy; you simply add a <code>&lt;script&gt;</code> element, and set its <code>src</code> attribute to point to the script file.</p>

                    <p>Since some of these script files are quite large, it's a good idea to add these <code>&lt;script&gt;</code> elements at the end of your page, just before the <code>&lt;/body&gt;</code> tag. That way, the content of the page can be parsed and displayed to the reader while the browser continues to download and parse the JavaScript files. Add the following elements to your page, just above the <code>&lt;/body&gt;</code> tag:</p>

                    <pre><code>
&lt;!-- hot links to Bootstrap JavaScript and jQuery (required by Bootstrap) --&gt;
&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
                    </code></pre>

                    <p>Order matters here as well. The jQuery library script must be included <em>before</em> the Bootstrap script, as the Bootstrap script will utilize functions and global variables defined in the jQuery script.</p>

                    <h3>Add the Container</h3>

                    <p>Bootstrap uses a content box approach similar to what we've been using in previous labs. Their content box is a bit smarter though. It uses media queries to resize itself as the viewport widens, growing to a maximum width and then centering on the screen. Thankfully, you get all of this for free by simply adding a <code>&lt;div class="container"&gt;</code> element inside your <code>&lt;body&gt;</code> element. All the rest of the page content should then go inside this <code>&lt;div class="container"&gt;</code>element.</p>



                    <h3>Add the Carousel</h3>

                    <p>A "carousel" is a component that cycles through a series of images, showing one at a time. These components also provide controls that allow the reader to view the next image, previous image, or jump to any image in the series.</p>

                    <p>Bootstrap provides a component for this, and theirs will cycle through a series of "slides." Each slide can have an image and an optional block of HTML which will be overlayed on the image as a caption.</p>

                    <p>To add the carousel, add a <code>&lt;div id="pawnee-carousel" class="carousel slide"&gt;</code> to the page, inside the <code>&lt;div class="container&gt;</code> elements. The <code>id</code> attribute is used by Bootstrap to relate the carousel controls we'll add to this particular carousel (in case there is more than one on the page), so we'll give it an id of 'pawnee-carousel'.</p>

                    <p>Inside the carousel <code>&lt;div&gt;</code>, we'll next add the slide indicators, which are those little dots shown at the bottom center that indicate which slide is being shown, and allow the reader to jump to a particular slide. These indicators are added as an ordered list of items with some special 'data-' attributes. The carousel <code>&lt;div&gt;</code> with indicator markup should look like this:</p>

                    <pre><code>
&lt;div id=&quot;pawnee-carousel&quot; class=&quot;carousel slide&quot;&gt;
    &lt;!-- slide indicators --&gt;
    &lt;ol class=&quot;carousel-indicators&quot;&gt;
        &lt;li data-target=&quot;#pawnee-carousel&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;
        &lt;li data-target=&quot;#pawnee-carousel&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;
        &lt;li data-target=&quot;#pawnee-carousel&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;
        &lt;li data-target=&quot;#pawnee-carousel&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;
    &lt;/ol&gt;
    
    ...more to come...

&lt;/div&gt; &lt;!-- carousel --&gt;         
                    </code></pre>

                    <p>The <code>data-target</code> and <code>data-slide-to</code> attributes are used by Bootstrap's JavaScript to know which carousel to adjust, and which slide to show, when the reader clicks directly on the indicators. The HTML 5 spec allows for these 'data-' attributes to be used by libraries and frameworks for their own purposes.</p>

                    <p>The slides themselves are defined in a nested <code>&lt;div class="carousel-inner"&gt;</code> element that should appear just after the carousel controls you just added. Each slide is then in yet another nested <code>&lt;div class="item"&gt;</code>. The markup for the first slide would thus look like this:</p>

                    <pre><code>
    ...carousel indicators...

    &lt;!-- slides --&gt; 
    &lt;div class=&quot;carousel-inner&quot;&gt;
        &lt;!-- slide --&gt;
        &lt;div class=&quot;item active&quot;&gt;
            &lt;img src=&quot;img/summer-park.jpg&quot; alt=&quot;Summer in the Park&quot;&gt;
            &lt;div class=&quot;carousel-caption&quot;&gt;
                &lt;p&gt;Summer in our Parks&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        ...more slides...
        
    &lt;/div&gt; &lt;!-- .slides --&gt;

    ...more to come...
                    </code></pre>

                    <p>Each slide <code>&lt;div&gt;</code> simply contains the image to display, and an optional caption, wrapped in a <code>&lt;div class="carousel-caption"&gt;</code> element. These captions can contain any HTML markup you want, but we'll use a simple <code>&lt;p&gt;</code> element for now.</p>

                    <p>The code snipped above shows the markup for the first slide. Add the markup for the other three slides, using the following image URLs and captions. Include the 'item' class on each slide, but <strong>don't include the 'active' class on the other slides</strong>, as only the first slide should be styled as active when the page first loads (Bootstrap will re-assign this active class via JavaScript as it advances the sldies).</p>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Image URL</th>
                                <th>Caption</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>img/autumn-park.jpg</td>
                                <td>Autumn in our Parks</td>
                            </tr>
                            <tr>
                                <td>img/winter-park.jpg</td>
                                <td>Winter in our Parks</td>
                            </tr>
                            <tr>
                                <td>img/spring-park.jpg</td>
                                <td>Spring in our Parks</td>
                            </tr>
                        </tbody>
                    </table>

                    <p>After the slides, we need to add one last bit of markup for the next/previous controls (the arrows on the left and right side of the carousel). The markup for those looks like this, and it should appear after the slides <code>&lt;div&gt;</code>, but still within the overall carousel <code>&lt;div&gt;</code>:</p>

                    <pre><code>
    ...slides markup...

    &lt;!-- left-right controls --&gt;
    &lt;a class=&quot;left carousel-control&quot; href=&quot;#pawnee-carousel&quot; data-slide=&quot;prev&quot;&gt;
        &lt;span class=&quot;icon-prev&quot;&gt;&lt;/span&gt;
    &lt;/a&gt;
    &lt;a class=&quot;right carousel-control&quot; href=&quot;#pawnee-carousel&quot; data-slide=&quot;next&quot;&gt;
        &lt;span class=&quot;icon-next&quot;&gt;&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt; &lt;!-- carousel --&gt;
                    </code></pre>

                    <p>The empty <code>&lt;span&gt;</code> tags end up getting their content from the style class assigned to them ('icon-prev' and 'icon-next'). Those style rules assign the appropriate image as the background-image of the span, and use other CSS attributes to place them on the left and right sides of the carousel.</p>

                    <p>If you got all the markup correct, you should now be able to view the carousel in your browser, and advance the slides. Once you change slides the first time, the carousel will then start to cycle them in a loop.</p>

                    <p>If the carousel isn't working, compare your markup to this <a href="carousel.html">full carousel example</a>.</p>

                    <p>To cause the carousel to start cycling the images immediately on page load, add this bit of JavaScript to the very end of your <code>&lt;body&gt;</code> section, <strong>after the <code>&lt;script&gt;</code> element that includes the Bootstrap JavaScript file</strong>:</p>

                    <pre><code>
    ... &lt;script&gt; elements for jQuery and Bootstrap ...

    &lt;!-- auto-play the carousel --&gt;
    &lt;script&gt;
        $(&#039;.carousel&#039;).carousel();
    &lt;/script&gt;

&lt;/body&gt;
                    </code></pre>

                    <p>We haven't covered JavaScript yet, so don't worry about understanding what that does at this point. I'll explain this when we learn the jQuery library.</p>

                    <h3>Add the Responsive Multi-Column Content</h3>

                    <p>Lastly, we need to add the responsive three-column layout content that appears below the carousel. To make this responsive, we'll use <a href="http://getbootstrap.com/css/#grid">Bootstrap's grid system</a>.</p>

                    <p>Bootstrap grids use nested <code>&lt;div&gt;</code> elements, an outer div for each row, and inner divs for each column. In our case, we want one row, and three evenly-sized columns.</p>

                    <p>Create a <code>&lt;div class="row"&gt;</code> for the row, and create three <code>&lt;div class="col-md-4"&gt;</code> elements for each column.</p>

                    <p>In the first column, add an <code>&lt;h2&gt;</code> element with the content 'Parks', and wrap it in an <code>&lt;a&gt;</code> element. Then add an <code>&lt;img&gt;</code> element, setting the <code>src</code> attribute to 'img/parks.png'. Also add a <code>class="col-pic"</code> attribute so we can apply some styles to these pictures we add to each column. Finally add two runs of lorem text.</p>

                    <p>The row and first column markup should look like this:</p>

                    <pre><code>
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-4&quot;&gt;
        &lt;h2&gt;&lt;a href=&quot;#&quot;&gt;Parks&lt;/a&gt;&lt;/h2&gt;
        &lt;img src=&quot;img/parks.png&quot; alt=&quot;dog in park&quot; class=&quot;col-pic&quot;&gt;
        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quasi, amet, iure, numquam, consequuntur deleniti nam illum molestiae eos quis saepe perferendis dignissimos commodi architecto dolores quod suscipit qui animi voluptatem. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quidem, officia possimus minus. Libero assumenda in voluptate excepturi repellendus quia maxime officia deserunt eum voluptatum! Quia dicta necessitatibus quisquam officia temporibus.&lt;/p&gt;
    &lt;/div&gt;
    ...two more columns...
&lt;/div&gt; &lt;!-- .row --&gt;
                    </code></pre>

                    <p>The second column should have the same structure as the first, except the title should be 'Community Center' and the image <code>src</code> attribute should be 'img/community.jpg'.</p>

                    <p>The third column should have the same structure as well, with the title being 'Harvest Festival' and the image <code>src</code> being 'img/harvest.jpg'.</p>

                    <p>Finally, we need to add a style rule for the column images (.col-pic). I've included an empty styles.css file for you. You'll notice that it doesn't include the reset.css because Bootstrap already does that. So all you need to do is add a style rule with the selector '.col-pic' and apply the following styles:</p>

                    <ul>
                        <li><a href="http://www.w3schools.com/cssref/pr_class_float.asp">float</a> the image to the left</li>
                        <li>set its <a href="http://www.w3schools.com/cssref/pr_dim_width.asp">width</a> to 100px</li>
                        <li>set the <a href="http://www.w3schools.com/cssref/pr_margin-right.asp">right margin</a> to 1em</li>
                        <li>set the <a href="http://www.w3schools.com/cssref/pr_margin-bottom.asp">bottom margin</a> to 1em</li>
                    </ul>

                    <h3>Test the Page</h3>

                    <p>At this point, your page should look like the first screen shot. To see what the page will look like on the common device screen sizes, you can either resize your browser window, or use the Web Developer add-in on Firefox (should be pre-installed on your lab machines). On the Web Developer toolbar, click on the 'Resize' button and choose 'View Responsive Layouts' on the drop-down menu. This should open a new tab showing you how the page would look at the various screen sizes used by mobile devices.</p>

                    <p>If all looks good, move on to committing your changes, publishing your site, and submitting your published site URL.</p>

                </section>

                <section id="github">
                    <h2>Stage, Commit, and Push to GitHub</h2>

                    <!--#include virtual="../inc/commit.html" -->
                </section>

                <section id="submit">
                    <h2>Publish Site and Submit URL via Canvas</h2>

                    <!--#include virtual="../inc/publish.html" -->

                    <p>After you've published your site and verified that it's working, <strong>submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288921">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299189">Section B</a>)</strong>.</p>
                </section>

                <section id="optional-steps">
                    <h2>Optional Steps</h2>

                    <p>If you get done early, or just want an extra challenge try one of these optional steps.</p>

                    <h3>Hide the Carousel on Screens Narrower than 767px</h3>

                    <p>The carousel is cool, but it takes up quite a bit of prime real estate on a phone screen. Ideally, we should hide the carousel on screens narrower than 767px. Although Bootstrap does not do this automatically, we can easily add a media rule to do it ourselves.</p>

                    <p>In your styles.css file, add this media rule, which will be applied when the viewport is narrower than 767px:</p>
                    
                    <pre><code>
@media screen and (max-width: 767px) {
    /* styles to apply on very narrow screens */
}
                    </code></pre>

                    <p>Now add a style rule inside this media rule for the class '.carousel', and set the <a href="http://www.w3schools.com/cssref/pr_class_display.asp">display property</a> to 'none'.</p>

                    <p>If you did everything correctly, the carousel should now disappear when the viewport is narrower than 767px.</p>

                    <h3 id="navbar">Add a Bootstrap Navbar</h3>

                    <p>The <a href="http://getbootstrap.com/components/#navbar">Bootstrap navbar</a> is a responsive component that looks like a normal navbar on desktop monitors, but condenses to a drop-down menu on smaller screens. Here's what it looks like on a desktop monitor:</p>

                    <p><img class="screen-shot img-responsive" src="img/desktop-navbar.png" alt="desktop screen shot with navbar"></p>

                    <p>And this is what it looks like on a phone screen</p>

                    <p><img class="screen-shot img-responsive" src="img/phone-navbar.png" alt="phone screen shot with navbar"></p>

                    <p>This change in behavior is handled automatically by Bootstrap, but you have to add all the markup for both the navbar links and the drop-down button that appears on smaller screens. Let's do that now.</p>

                    <p>Add a <code>&lt;nav&gt;</code> element <strong>at the top</strong> of the <code>&lt;div class="container"&gt;</code> element to hold the entire navbar content, and give it a <a href="http://www.w3schools.com/tags/att_global_class.asp">style class</a> of 'navbar navbar-default'. This actually attaches two style classes to our <code>&lt;nav&gt;</code> element, the first makes it a navbar, and the second uses the default (light-colored) styling. Bootstrap also offers 'navbar-inverse' for an inverted, darkly-colored look.</p>

                    <p>The <code>&lt;nav&gt;</code> element should then contain two child elements. The first should be a <code>&lt;div class="navbar-header"&gt;</code> element, and its contents should look like this:</p>

                    <pre><code>
&lt;div class=&quot;container&quot;&gt; &lt;!-- existing container div --&gt;

    &lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;
        &lt;div class=&quot;navbar-header&quot;&gt;
            &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.pawnee-navbar-menu&quot;&gt;
                &lt;span class=&quot;sr-only&quot;&gt;Toggle Navigation&lt;/span&gt;
                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                        
            &lt;/button&gt;
            &lt;a class=&quot;navbar-brand&quot; href=&quot;index.html&quot;&gt;Pawnee Parks &lt;img src=&quot;img/logo.png&quot; alt=&quot;Parks logo&quot;&gt;&lt;/a&gt;
        &lt;/div&gt;
        ...more to come...
    &lt;/nav&gt;

    ...carousel and rest of page...
                    </code></pre>

                    <p>The <code>&lt;button&gt;</code> element is the drop-down button shown on smaller screens, and those three <code>&lt;span class="icon-bar"&gt;</code> elements create the three stacked bars one typically sees on a menu button in a phone application. The <code>&lt;span class="sr-only"&gt;</code> is only visible to screen readers, and it announces that this button is for toggling the menu.</p>

                    <p>The line after the <code>&lt;button&gt;</code> element is known as the "brand" area of the navbar. I've included some text "Pawnee Parks" and an image of their logo, both of which are wrapped in a hyperlink that would take one back to the home page. This brand area will be displayed on small screens, with the menu button off to the right.</p>

                    <p>Now that we've added the navbar header markup, we now need to define our actual navbar items and where they should go. Add another <code>&lt;div&gt;</code> element to the <code>&lt;nav&gt;</code> element, and set its class attribute to 'collapse navbar-collapse pawnee-navbar-menu'. Notice that the last class name in that list is the same as the <code>data-target</code> attribute value of the <code>&lt;button&gt;</code> element above. Bootstrap's JavaScript uses this to hide and show the navbar menu when you tap/click that button.</p>

                    <p>Inside our second <code>&lt;div&gt;</code> we need to add our standard <code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code> elements for our navigation links. Again, we need to apply some Bootstrap style classes, and the contents of your <code>&lt;nav&gt;</code> element should ultimately look like this:</p>

                    <pre><code>
&lt;nav class=&quot;navbar navbar-default&quot; role=&quot;navigation&quot;&gt;
    &lt;div class=&quot;navbar-header&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.pawnee-navbar-menu&quot;&gt;
            &lt;span class=&quot;sr-only&quot;&gt;Toggle Navigation&lt;/span&gt;
            &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
            &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
            &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                        
        &lt;/button&gt;
        &lt;a class=&quot;navbar-brand&quot; href=&quot;index.html&quot;&gt;Pawnee Parks &lt;img src=&quot;img/logo.png&quot; alt=&quot;Parks logo&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class=&quot;collapse navbar-collapse pawnee-navbar-menu&quot;&gt;
        &lt;ul class=&quot;nav navbar-nav&quot;&gt;
            &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Parks&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Community Center&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Harvest Festival&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/nav&gt;
                    </code></pre>

                    <p>We are defining four navbar links here&mdash;Home, Parks, Community Center, and Harvest Festival. The Home link has a style class of 'active', which will cause Bootstrap to highlight it as being the current page. All the links have an <code>href</code> attribute of '#', which we are using for testing as it just keeps on on the same page. In a real project, you'd of course change these to point towards the appropriate page.</p>

                    <p>At this point, you should be able to save your files and see the navbar at the top of your page. Try making your browser window narrow, and see how the navbar turns into a drop-down menu when it gets less than 768px.</p>

            </article>
        </div>
    </body>
</html>