<!doctype html>
<html>
    <head>
        <!--#include virtual="../inc/common-head.html" -->

        <meta name="description" content="INFO 343 Basic Site Lab">
        <title>Lab 3: Picture Browser</title>
    </head>
    <body>
        <div class="container">

            <!--#include virtual="../inc/crumbtrail.html" -->

            <article class="lab">

                <section id="intro">
                    <div class="page-header lab-title">
                        <h1>Lab 3: Picture Browser</h1>
                        <p class="lead">CSS Transforms, Transitions, and Overflow</p>
                    </div>

                    <p>In our previous lab, we practiced building a basic web site that employed navigation bars, floated images, and custom fonts. This week we will leverage some of those same techniques, but we'll also practice a few new things we learned this week in class:</p>

                    <ul>
                        <li>Constraining content to a fixed width and height and controlling what happens when it overflows</li>
                        <li>Using transforms to scale elements on hover</li>
                        <li>Using transitions to smoothly animate visual changes</li>
                    </ul>

                    <p>We will practice these techniques by building a simple photo browser page.</p>

                    <h2>General Instructions</h2>
                    <ol>
                        <li>If you get stuck at any point, search the Internet, ask your neighbor, or ask the TA for help.</li>

                        <li>At the end of the lab, submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288920">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299188">Section B</a>).</li>

                        <li>If you don't finish all the required tasks during our lab time, finish them over the weekend and submit your published site URL before 8:00am on Monday morning.</li>

                        <li>If you finish all the required steps, go on and try some of the <a href="#optional-steps">optional ones</a>. Remember that you have to do at least one of the optional steps in order to get 10/10 on the Completeness portion of your grade. If you do only the required steps, you'll get 9/10 on that portion.</li>
                    </ol>

                    <h2>Required Steps</h2>
                    <ol>
                        <li><a href="#fork">Fork my lab3 repository and clone to your lab machine</a></li>

                        <li><a href="#pages">Build and Style the HTML Page</a></li>

                        <li><a href="#github">Stage, Commit, and Push to GitHub</a></li>

                        <li><a href="#submit">Publish your site to your web hosting server and submit the site URL via Canvas</a></li>
                    </ol>
                </section>

                <section id="fork">
                    <h2>Fork and Clone</h2>

                    <p>First, go to <a href="https://github.com" target="_blank">GitHub</a> and sign into your account.</p>

                    <p>Next, go to my <a href="https://github.com/drstearns/lab3" target="_blank">lab3 repository on GitHub</a>, and fork it. You did this in our previous lab, but in case you forgot how to do so, click the "Fork" button at the top-right of the page and follow any instructions you receive. This will create a copy of this repository in your own account so that you have something to start with. The repository contains the images and other file stubs you'll need.</p>

                    <p>Once you've forked the repository, clone it to your local lab machine using SourceTree. We've done this a few times now, but if you've forgotten how, follow these steps:</p>

                    <ol>
                        <li>In <strong>your forked lab3 repository</strong> (not my original one) on the GitHub site, copy the 'HTTPS Clone URL' on the right side of the screen</li>
                        <li>Run the SourceTree app</li>
                        <li>Click on the Clone/New button in the upper-left of the screen</li>
                        <li>Enter the GitHub HTTPS clone URL you copied into the Source URL box</li>
                        <li>Hit tab, and SourceTree will automatically populate the Destination Path for you (usually a new folder named after your repository in the My Documents folder)</li>
                        <li>Click the 'Clone' button to clone the GitHub repository to your local machine</li>
                        <li>If you get stuck, as your TA or a neighbor for help</li>
                    </ol>
                </section>

                <section id="pages">

                    <h2>Build and Style the Page</h2>

                    <p class="alert alert-info">Strive to get your page looking as similar to the screen shots below as possible. In a professional project, you'll often get screen shots like these from a graphic designer, and your job as a web developer is to turn those into real live web pages.</p>

                    <p>Now that you have a local clone of your repository, you'll next build and style the photo browser page. You'll be building only one page for this lab, but that page is more complicated than it may at first appear.</p>

                    <p>I will lead you through building this page, step-by-step, but first I want to show you a few screen shots and a video so that you can get a sense of what it should look and feel like. This is what it should look like:</p>

                    <p><img class="screen-shot img-responsive" src="img/wide.png" alt="screen shot of photo browser page"></p>

                    <p>The pictures are displayed in a fixed size, and arranged in a grid that should respond to the browser width. So when you make your browser window narrower, the pictures should reflow like this:</p>

                    <p><img class="screen-shot img-responsive" src="img/narrow.png" alt="screen shot of narrow photo browser page"></p>

                    <p>But those pictures are not static; when the reader hovers the mouse over a picture, it should increase in size, allowing the reader to see the picture better:</p>

                    <p><img class="screen-shot img-responsive" src="img/hover-pic.png" alt="screen shot of hovering over a picture"></p>

                    <p>This video shows this effect in action:</p>

                    <video class="responsive" controls>
                        <source src="https://courses.washington.edu/info343/stearns/captures/info343-lab3.mov" type="video/mp4">
                        Unfortunately, your browser does not support playing embedded HTML 5 video. Try <a href="http://youtu.be/gr1s6B95vyI">viewing this on YouTube</a> instead.
                    </video>

                    <p>(if you have troubles viewing this video, try <a href="http://youtu.be/gr1s6B95vyI">viewing it on YouTube</a>)</p>

                    <p>When hovering over an image, the reader can also click on the image to view it. This just navigates to the image file itself, allowing the reader to see the full image at its full resolution, and download the image if desired.</p>

                    <p>And, as shown at the end of that video, the film logo on the top right should be slightly transparent at first, but become fully opaque when the reader hovers the mouse over it.</p>

                    <p>Now let's build this page step-by-step.</p>

                    <h3>Create the HTML File</h3>

                    <p>Create a new file in your text editor and save it in the root directory of your repository as 'index.html'. Add the necessary <a href="http://www.w3schools.com/tags/tag_doctype.asp">HTML5 doctype declaration</a>, and then create the basic <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements that all pages need to have.</p>

                    <p>In the <code>&lt;head&gt;</code> section, add all the necessary <a href="../../examples/html/meta-data.shtml">meta-data elements</a>. Try to do this without copying and pasting the following code, but in the end, you'll need at least these:</p>

                    <pre><code>
&lt;!-- tells the browser this file was saved in the UTF-8 character encoding --&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;

&lt;!-- tells the browser to get style information from styles.css in our 'css' sub-directory --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;

&lt;!-- title for the page --&gt;
&lt;title&gt;Photo Browser&lt;/title&gt;

&lt;!-- REPLACE &#039;your uw net id&#039; with your UW net id --&gt;
&lt;meta name=&quot;author&quot; content=&quot;your uw net id&quot;&gt;
                    </code></pre>

                    <p>The <code>&lt;link&gt;</code> element tells the browser to look for styling information in a stylesheet I've already started for you. This stylesheet is named 'styles.css' and it's in your 'css' sub-directory. It imports that same reset stylesheet we used in our last lab, and two Google web fonts: Open Sans and Cantora One.</p>

                    <h3>Add the body texture and content box</h3>

                    <p>Just as in our last lab, the body of the page has a background texture. That texture is already in your 'img' sub-directory in the file named 'sandpaper.png'. Add a CSS rule for the <code>&lt;body&gt;</code> element that tells the browser to use this file as the background-image.</p>

                    <p>Since the body has a texture, create a box in the <code>&lt;body&gt;</code> section of your HTML page for our main content. You could use an <code>&lt;article&gt;</code> element for this, assuming that our content is something that makes sense to syndicate independent of the rest of the page. Or you could just use a <code>&lt;div&gt;</code> element like you did last time. Regardless of which tag you use, the content box should have a width of 90% of its containing element (the <code>&lt;body&gt;</code>), a white background, top/bottom margins of 20px, and left/right margins that keep it horizontally centered within the body.</p>

                    <p>The base font for the body (which is inherited by all elements inside) should be 'Open Sans' at 16px.</p>

                    <h3>Add and style the header content</h3>

                    <p><img class="screen-shot img-responsive" src="img/header.png" alt="screen shot of header content"></p>

                    <p>For the header content, use the HTML 5 <code>&lt;header&gt;</code> element we discussed in class this week. The header should have a background color of #907A46, and little bit of padding. The header contains two things: a film roll logo; and the text "Photo Browser".</p>

                    <p>The logo image is already in your 'img' directory in the file named 'logo.png'. Note that it is displayed over on the far right of the header area, and it is slightly transparent (opacity of 0.7). When the reader hovers the mouse over it, the logo should become entirely opaque (opacity: 1). This makes it appear initially a bit dimmed or washed-out, but then it becomes fully-saturated on hover.</p>

                    <p>The logo should also be a hyperlink; clicking on the logo should take the user to the URL <a href="http://www.morguefile.com/">http://www.morguefile.com/</a>, which is a free stock photography site. This is where I got the various pictures you'll add in the next step.</p>

                    <p>The text in the header should be in the Google web font 'Cantora One' (already included at the top of your styles.css file), and sized to be 200% of the base font size. Its color should be #EEEDEA. Since this is the title of the page, it would make sense to use a top-level heading element for this text.</p>

                    <p>If you have troubles getting the text to be vertically centered in the header, remember that the line-height property can be used to vertically center a single line of text. Set the line-height to be the same height as the logo (60px), which is what you are trying to vertically center against.</p>

                    <h3>Add and style the photo thumbnails and captions</h3>

                    <p>Now that the header content is in place, let's add the the photo thumbnails and corresponding captions. You could simply use bare <code>&lt;img&gt;</code> and <code>&lt;p&gt;</code> elements for this, but there is a more semantically-appropriate set of elements for images with corresponding captions: <a href="../../examples/html/reference.shtml#figure,%20figcaption"><code>&lt;figure&gt;</code> and <code>&lt;figcaption&gt;</code></a>.</p>

                    <p>The thumbnails are 190px wide and 190px tall, but the photos themselves are not square, and some are in landscape orientation while others are in portrait orientation. To make all the images render as square thumbnails, we need to "frame" each image with another element, which we can style such that it clips off the part of the picture that might overflow the frame. There is no semantic tag for frames like these, so we'll just use a <code>&lt;div&gt;</code> with a <code>class</code> attribute set to 'frame'.</p>

                    <p class="alert alert-info">Note that if we were developing an entire photo cataloging and browsing system, we would probably pre-process photos on upload to generate square thumbnails, but for this lab we'll just use this framing technique. It also gives you a chance to practice constraining the sizes of images in CSS.</p>

                    <p>The photos themselves should also be hyperlinks that when clicked, take the reader to the full image. In other words, the <code>href</code> attribute of the <code>&lt;a&gt;</code> tag should be the same as the <code>src</code> attribute of the <code>&lt;img&gt;</code> tag.</p>

                    <p>The element structure for a thumbnail would thus look like this:</p>

                    <pre><code>
&lt;figure&gt;
    &lt;div class=&quot;frame&quot;&gt;
        &lt;a href=&quot;img/bunny.jpg&quot;&gt;&lt;img src=&quot;img/bunny.jpg&quot; alt=&quot;bunny&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;Bunny&lt;/figcaption&gt;
&lt;/figure&gt;
                    </code></pre>

                    <p>Add the appropriate elements to display all eight of the following photos and captions:</p>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Image URL</th>
                                <th>Caption</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>img/bunny.jpg</td>
                                <td>Bunny</td>
                            </tr>
                            <tr>
                                <td>img/trees.jpg</td>
                                <td>Trees</td>
                            </tr>
                            <tr>
                                <td>img/canoe.jpg</td>
                                <td>Canoe</td>
                            </tr>
                            <tr>
                                <td>img/cat.jpg</td>
                                <td>Cat</td>
                            </tr>
                            <tr>
                                <td>img/dog.jpg</td>
                                <td>Dog</td>
                            </tr>
                            <tr>
                                <td>img/landscape.jpg</td>
                                <td>Landscape</td>
                            </tr>
                            <tr>
                                <td>img/tiger.jpg</td>
                                <td>Tiger</td>
                            </tr>
                            <tr>
                                <td>img/raccoon.jpg</td>
                                <td>Raccoon</td>
                            </tr>
                        </tbody>
                    </table>

                    <p>After you've added the pictures and captions, you now need to add some style rules to create the grid layout, size down the images, and clip off any part of the image that extends outside the frame.</p>

                    <p>By default, browsers display <code>&lt;figure&gt;</code> elements as blocks, meaning they stack on top of one another. We want them to appear side-by-side, just like the navigation bar list items you created in the previous lab. If you've forgotten how to do that, look at your solution for lab 2, or the <a href="../../examples/css-examples/links.html">styling links example page</a>.</p>

                    <p>Give each <code>&lt;figure&gt;</code> a bit of padding, and a background color of white (#FFF). The <code>&lt;figure&gt;</code> element is a bit different in that it won't inherit the white background from the content box; instead it will be transparent, which will cause us problems later on when we add the zooming transform. So explicitly set the background color to white.</p>

                    <p>For the <code>&lt;figcaption&gt;</code> we will use a light-weight version of the Open Sans font, so set the font-weight to 300 (normal weight is 400). Make the text horizontally-centered, and give it a top margin of 5px so there's a bit of separation between the frame and the caption.</p>

                    <p>For the frames (<code>&lt;div class="frame"&gt;</code>), set the width to be 200px, with a 10px solid border in the color #EEE (light gray). Also make the background color that same #EEE so that the gray will fill in behind portrait-oriented photos. Since our landscape-oriented photos are not square, we next need to tell the frame to clip off any part of the image that extends beyond the frame border; to do that, set the overflow property to 'hidden'. Finally tell the frame to center-align the text inside it: this actually affects any inline elements as well, so this will center-align portrait-oriented photos in the frame.</p>

                    <p>Finally, we need to size down the images themselves. Add a rule that sets the height of the images to 190px. We use height here instead of width so that landscape-oriented photos (which are most of them) fill the width of the frame. The bit that extends to the right of the frame will be clipped by that overflow setting we made to the frame itself.</p>

                    <p class="alert alert-info">You could of course reverse this and set the width of the image to 190px and let the frame clip off the bottom of the portrait-oriented photos. This is really a matter of taste, but since most of our photos are landscape-oriented, controlling height seems like a better choice.</p>

                    <h3>Add Transitions and Transforms</h3>

                    <p>At this point, you should have a static page showing the pictures as thumbnails in a grid, and the thumbnails should reflow as you make your browser window wider or narrower. Now let's add that scaling effect when the mouse is hovered over an image.</p>

                    <p>We want to scale the entire <code>&lt;figure&gt;</code> on hover, so add a new style rule that uses the ':hover' pseudo-selector on <code>&lt;figure&gt;</code> elements. In that rule, we want to apply two things: a scaling transform that makes the figure 1.5 times as large; and a box shadow.</p>

                    <p>Currently, the scaling transform requires the use of vendor-specific properties as well as the now-standard 'transform' property. Most browsers are starting to support the standard transform property, but older versions still require the vendor-specific ones. Thankfully, we can just specify all of them, putting the standard one last, and our rule will continue to work both with older browsers and newer versions in the future. In a few more years, these vendor-specific properties probably won't be necessary anymore, but for now, you should include them. The properties in your rule should look like this:</p>

                    <pre><code>
box-shadow: 2px 2px 6px #555;

-webkit-transform: scale(1.5);
-moz-transform: scale(1.5);
-o-transform: scale(1.5);
-ms-transform: scale(1.5);
transform: scale(1.5);  
                    </code></pre>

                    <p>These settings tell the browser to scale the element by 150%, and add a box shadow so that it appears like it's jumping off the screen. Scaling is only one kind of transform you can do: see the <a href="http://www.w3schools.com/css3/css3_2dtransforms.asp">CSS reference page on transforms</a> for more details.</p>

                    <p>After you save everything, you should now be able to hover over a figure and see it zoom to 1.5 size. But the effect will be instantaneous, not smoothly animated as in the video. To add this smooth transition from normal size to 1.5 size, we need to add a transition property to the style rule that applies to the <code>&lt;figure&gt;</code> elements in general (not the one that applies to their hover state). Transition properties are specified on the base style rule, and are then applied when transitioning to a rule based on user interaction (like <code>figure:hover</code>).</p>

                    <p>The standardized transition property, like the transform property, is still relatively new, so older browser versions require vendor prefixes. The properties in your rule should look like this:</p>

                    <pre><code>
-webkit-transition: all 0.2s ease;
-moz-transition: all 0.2s ease;
-o-transition: all 0.2s ease;
-ms-transition: all 0.2s ease;
transition: all 0.2s ease;                        
                    </code></pre>

                    <p>These settings tell the browser to transition all property changes over the course of 0.2 seconds, using the 'ease' timing function. There are a few different kinds of timing functions, and you can choose to transition only particular properties instead of all of them. See the <a href="http://www.w3schools.com/css3/css3_transitions.asp">CSS reference page on transitions</a> for more details.</p>

                    <p>Lastly, we also need to add a transition to smooth out the opacity change when the reader hovers over the logo image. Add the same properties as above to the base style rule for the logo, and that should cause the opacity change on hover to smoothly transition over the course of 0.2 seconds.</p>

                </section>

                <section id="github">
                    <h2>Stage, Commit, and Push to GitHub</h2>

                </section>

                <section id="submit">
                    <h2>Publish Site and Submit URL via Canvas</h2>

                </section>

                <section id="optional-steps">
                    <h2>Optional Steps</h2>

                </section>



            </article>
        </div> <!-- .container -->
    </body>
</html>