<!doctype html>
<html>
    <head>
        <!--#include virtual="../inc/common-head.html" -->

        <meta name="description" content="INFO 343 Basic Site Lab">
        <title>Lab 3: Picture Browser</title>
    </head>
    <body>
        <div class="container">

            <!--#include virtual="../inc/crumbtrail.html" -->

            <article class="lab">

                <section id="intro">
                    <div class="page-header lab-title">
                        <h1>Lab 3: Picture Browser</h1>
                        <p class="lead">CSS Transforms, Transitions, and Animations</p>
                    </div>

                    <p>In our previous lab, we practiced building a basic web site that employed navigation bars, floated images, and custom fonts. This week we will leverage some of those same techniques, but we'll also practice a few new things we learned this week in class:</p>

                    <ul>
                        <li>Controlling the opacity of elements</li>
                        <li>Using transforms to scale elements on hover</li>
                        <li>Using transitions to smoothly animate visual changes</li>
                    </ul>

                    <p>We will practice these techniques by building a simple photo browser page.</p>

                    <h2>General Instructions</h2>
                    <ol>
                        <li>If you get stuck at any point, search the Internet, ask your neighbor, or ask the TA for help.</li>

                        <li>At the end of the lab, submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288920">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299188">Section B</a>).</li>

                        <li>If you don't finish all the required tasks during our lab time, finish them over the weekend and submit your published site URL before 8:00am on Monday morning.</li>

                        <li>If you finish all the required steps, go on and try some of the <a href="#optional-steps">optional ones</a>. Remember that you have to do at least one of the optional steps in order to get 10/10 on the Completeness portion of your grade. If you do only the required steps, you'll get 9/10 on that portion.</li>
                    </ol>

                    <h2>Required Steps</h2>
                    <ol>
                        <li><a href="#fork">Fork my lab3 repository and clone to your lab machine</a></li>

                        <li><a href="#pages">Build and Style the HTML Page</a></li>

                        <li><a href="#github">Stage, Commit, and Push to GitHub</a></li>

                        <li><a href="#submit">Publish your site to your web hosting server and submit the site URL via Canvas</a></li>
                    </ol>
                </section>

                <section id="fork">
                    <h2>Fork and Clone</h2>

                    <p>First, go to <a href="https://github.com" target="_blank">GitHub</a> and sign into your account.</p>

                    <p>Next, go to my <a href="https://github.com/drstearns/lab3" target="_blank">lab3 repository on GitHub</a>, and fork it. You did this in our previous lab, but in case you forgot how to do so, click the "Fork" button at the top-right of the page and follow any instructions you receive. This will create a copy of this repository in your own account so that you have something to start with. The repository contains the images and other file stubs you'll need.</p>

                    <p>Once you've forked the repository, clone it to your local lab machine using SourceTree. We've done this a few times now, but if you've forgotten how, follow these steps:</p>

                    <ol>
                        <li>In <strong>your forked lab3 repository</strong> (not my original one) on the GitHub site, copy the 'HTTPS Clone URL' on the right side of the screen</li>
                        <li>Run the SourceTree app</li>
                        <li>Click on the Clone/New button in the upper-left of the screen</li>
                        <li>Enter the GitHub HTTPS clone URL you copied into the Source URL box</li>
                        <li>Hit tab, and SourceTree will automatically populate the Destination Path for you (usually a new folder named after your repository in the My Documents folder)</li>
                        <li>Click the 'Clone' button to clone the GitHub repository to your local machine</li>
                        <li>If you get stuck, as your TA or a neighbor for help</li>
                    </ol>
                </section>

                <section id="pages">

                    <h2>Build and Style the Page</h2>

                    <p class="alert alert-info">Try to get your page looking as similar to the screen shots as possible, but it doesn't have to match exactly. In a professional project, you'll often get screen shots like these from a graphic designer, and your job as a web developer is to turn those into real live web pages.</p>

                    <p>Now that you have a local clone of your repository, you'll next build and style the photo browser page. You'll be building only one page for this lab, but that page is more complicated than it may at first appear.</p>

                    <p>I will lead you through building this page, step-by-step, but first I want to show you a few screen shots and a video so that you can get a sense of what it should look and feel like. This is what it should look like:</p>

                    <p><img class="screen-shot img-responsive" src="img/wide.png" alt="screen shot of photo browser page"></p>

                    <p>The picture thumbnails are displayed in a fixed size, and arranged in a grid that should respond to the browser width. So when you make your browser window narrower, the pictures should reflow like this:</p>

                    <p><img class="screen-shot img-responsive" src="img/narrow.png" alt="screen shot of narrow photo browser page"></p>

                    <p>But those pictures are not static; when the reader hovers the mouse over a picture, it should increase in size, allowing the reader to see the picture better:</p>

                    <p><img class="screen-shot img-responsive" src="img/hover-pic.png" alt="screen shot of hovering over a picture"></p>

                    <p>This video shows this effect in action:</p>

                    <video class="responsive" controls preload="metadata">
                        <source src="https://courses.washington.edu/info343/stearns/captures/info343-lab3.mp4">
                        <source src="https://courses.washington.edu/info343/stearns/captures/info343-lab3.webm">

                    </video>
 
                    <p class="alert alert-warning">If you have troubles viewing this video, try <a href="http://youtu.be/cfqLrlaKW1g">viewing it on YouTube</a> instead.</p>

                    <p>When hovering over an image, the reader can also click on the image to view the full-sized version. This just navigates to the full-sized image file itself, allowing the reader to see the image at its full resolution, and download the image if desired.</p>

                    <p>And, as shown at the end of that video, the film logo on the top right should be slightly transparent at first, but become fully opaque when the reader hovers the mouse over it.</p>

                    <p>Now let's build this page step-by-step.</p>

                    <h3>Create the HTML File</h3>

                    <p>Create a new file in your text editor and save it in the root directory of your repository as 'index.html'. Add the necessary <a href="http://www.w3schools.com/tags/tag_doctype.asp">HTML5 doctype declaration</a>, and then create the basic <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> elements that all pages need to have.</p>

                    <p>In the <code>&lt;head&gt;</code> section, add all the necessary <a href="../../examples/html/meta-data.shtml">meta-data elements</a>. Try to do this without copying and pasting the following code, but in the end, you'll need at least these:</p>

                    <pre><code>
&lt;!-- tells the browser this file was saved in the UTF-8 character encoding --&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;

&lt;!-- tells the browser to get style information from styles.css in our 'css' sub-directory --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;

&lt;!-- shortcut icon for the page --&gt;
&lt;link rel=&quot;shortcut icon&quot; href=&quot;img/logo.png&quot;&gt;

&lt;!-- title for the page --&gt;
&lt;title&gt;Photo Browser&lt;/title&gt;

&lt;!-- REPLACE &#039;your uw net id&#039; with your UW net id --&gt;
&lt;meta name=&quot;author&quot; content=&quot;your uw net id&quot;&gt;
                    </code></pre>

                    <p>The <code>&lt;link&gt;</code> element tells the browser to look for styling information in a stylesheet I've already started for you. This stylesheet is named 'styles.css' and it's in your 'css' sub-directory. It imports that same reset stylesheet we used in our last lab, and two Google web fonts: Open Sans and Cantora One.</p>

                    <h3>Add the body texture and content box</h3>

                    <p>Just as in our last lab, the body of the page has a background texture. That texture is already in your 'img' sub-directory in the file named 'sandpaper.png'. Add a CSS rule for the <code>&lt;body&gt;</code> element that tells the browser to use this file as the <a href="http://www.w3schools.com/cssref/pr_background-image.asp">background-image</a>. Remember that the path you give for the background-image is relative to where this CSS file exists. This CSS file is in the 'css' sub-directory, and the background texture is in a peer sub-directory called 'img'. So you need to specify a relative path that goes up one directory, then back down into the 'img' sub-directory, and finally names the texture file itself (including the file extension).</p>

                    <p>Since the body has a texture, create a box in the <code>&lt;body&gt;</code> section of your HTML page for our main content. Since our content could be syndicated (i.e., it could be extracted from the surrounding page and redisplayed in another medium, like an email message or RSS reader), use the new <code>&lt;article&gt;</code> element I showed you in class. The <code>&lt;article&gt;</code> element should have a <a href="http://www.w3schools.com/cssref/pr_dim_width.asp">width</a> of 90% of its containing element (the <code>&lt;body&gt;</code>), a white <a href="http://www.w3schools.com/cssref/pr_background-color.asp">background</a>, top/bottom <a href="http://www.w3schools.com/cssref/pr_margin.asp">margins</a> of 20px, and left/right margins that keep it horizontally centered within the body (auto).</p>

                    <p>The base <a href="http://www.w3schools.com/cssref/pr_font_font.asp">font</a> for the body (which is inherited by all elements inside) should be 'Open Sans' at 16px.</p>

                    <h3>Add and style the header content</h3>

                    <p><img class="screen-shot img-responsive" src="img/header.png" alt="screen shot of header content"></p>

                    <p>For the header content (which goes inside your article content box), use the HTML 5 <code>&lt;header&gt;</code> element we discussed in class this week. The header should have a <a href="http://www.w3schools.com/cssref/pr_background-color.asp">background color</a> of #907A46, and 10px of <a href="http://www.w3schools.com/cssref/pr_padding.asp">padding</a>. The header contains two things: a film roll logo; and the text "Photo Browser".</p>

                    <p>The logo image is already in your 'img' directory in the file named 'logo.png'. The image file is bigger than we might want, so use the <a href="http://www.w3schools.com/cssref/pr_dim_height.asp">height property</a> to size it down to 60px in height. Note that it is also <a href="http://www.w3schools.com/cssref/pr_class_float.asp">floated</a> over to the right of the header area, and it is slightly transparent (opacity: 0.7). When the reader hovers the mouse over it, the logo should become entirely opaque (opacity: 1). This makes it appear initially a bit dimmed or washed-out, but then it becomes fully-saturated on hover.</p>

                    <p>The logo should also be a <a href="http://www.w3schools.com/tags/tag_a.asp">hyperlink</a>; clicking on the logo should take the user to the URL <a href="http://www.morguefile.com/">http://www.morguefile.com/</a>, which is a free stock photography site. This is where I got the various pictures you'll add in the next step.</p>

                    <p>The text in the header should be in the Google web font 'Cantora One' (already included at the top of your styles.css file), and <a href="http://www.w3schools.com/cssref/pr_font_font-size.asp">sized</a> to be 200% of the base font size. Its <a href="http://www.w3schools.com/cssref/pr_text_color.asp">color</a> should be #EEEDEA. Since this is the title of the page, it would make sense to use a <a href="http://www.w3schools.com/tags/tag_hn.asp">top-level heading element</a> for this text.</p>

                    <p>If you have troubles getting the text to be vertically centered in the header, remember that the <a href="http://www.w3schools.com/cssref/pr_dim_line-height.asp">line-height property</a> can be used to vertically center a single line of text. Set the line-height to be the same height as the logo (60px), which is what you are trying to vertically center against.</p>

                    <h3>Add and style the photo thumbnails and captions</h3>

                    <p>Now that the header content is in place, let's add the the photo thumbnails and corresponding captions. You could simply use bare <code>&lt;img&gt;</code> and <code>&lt;p&gt;</code> elements for this, but there is a more semantically-appropriate set of elements for images with corresponding captions: <a href="../../examples/html/reference.shtml#figure,%20figcaption"><code>&lt;figure&gt;</code> and <code>&lt;figcaption&gt;</code></a>.</p>

                    <p>The <code>&lt;figure&gt;</code> element should contain an <code>&lt;img&gt;</code> element and a <code>&lt;figcaption&gt;</code> element. The content of the <code>&lt;figcaption&gt;</code> should be the caption listed in the table below, and the <code>src</code> attribute of the <code>&lt;img&gt;</code> element should be set to the thumbnail URL also listed in the table below. Wrap the <code>&lt;img&gt;</code> in an <code>&lt;a&gt;</code> element so that the reader can click the image, and set the <code>href</code> attribute to the full-sized image URL also listed in the table below.</p>

                    <p>The element structure for a thumbnail would thus look like this:</p>

                    <pre><code>
&lt;figure&gt;
    &lt;a href=&quot;img/bunny.jpg&quot;&gt;&lt;img src=&quot;img/bunny-thumb.jpg&quot; alt=&quot;bunny&quot;&gt;&lt;/a&gt;
    &lt;figcaption&gt;Bunny&lt;/figcaption&gt;
&lt;/figure&gt;
                    </code></pre>

                    <p>Add eight of these HTML blocks and then alter the <code>&lt;figcaption&gt;</code>, as well as the <code>src</code> and <code>href</code> attributes to match the settings listed in the following table:</p>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Thumnail URL</th>
                                <th>Full-Sized URL</th>
                                <th>Caption</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>img/bunny-thumb.jpg</td>
                                <td>img/bunny.jpg</td>
                                <td>Bunny</td>
                            </tr>
                            <tr>
                                <td>img/canoe-thumb.jpg</td>
                                <td>img/canoe.jpg</td>
                                <td>Canoe</td>
                            </tr>
                            <tr>
                                <td>img/cat-thumb.jpg</td>
                                <td>img/cat.jpg</td>
                                <td>Cat</td>
                            </tr>
                            <tr>
                                <td>img/dog-thumb.jpg</td>
                                <td>img/dog.jpg</td>
                                <td>Dog</td>
                            </tr>
                            <tr>
                                <td>img/fruit-thumb.jpg</td>
                                <td>img/fruit.jpg</td>
                                <td>Fruit</td>
                            </tr>
                            <tr>
                                <td>img/landscape-thumb.jpg</td>
                                <td>img/landscape.jpg</td>
                                <td>Landscape</td>
                            </tr>
                            <tr>
                                <td>img/raccoon-thumb.jpg</td>
                                <td>img/raccoon.jpg</td>
                                <td>Raccoon</td>
                            </tr>
                            <tr>
                                <td>img/tiger-thumb.jpg</td>
                                <td>img/tiger.jpg</td>
                                <td>Tiger</td>
                            </tr>
                        </tbody>
                    </table>

                    <p>After you've added the pictures and captions, you now need to add some style rules to create the grid layout, and size down the images.</p>

                    <p>By default, browsers display <code>&lt;figure&gt;</code> elements as blocks, meaning they stack on top of one another. We want them to appear side-by-side, just like the navigation bar items you created in the previous lab. To make that happen, add a <code>display: inline-block;</code> property to a CSS rule that applies to all <code>&lt;figure&gt;</code> elements.</p>

                    <p>Also give each <code>&lt;figure&gt;</code> 10px of padding, and a background color of white (#FFF). Background colors don't inherit down the element tree, so the default background for our <code>&lt;figure&gt;</code> elements is transparent, which will cause us problems later on when we add the zooming transform.</p>

                    <p>For the <code>&lt;figcaption&gt;</code> we will use a light-weight version of the Open Sans font, so set the <a href="http://www.w3schools.com/cssref/pr_font_weight.asp">font-weight</a> property to 300 (normal weight is 400). Make the <a href="http://www.w3schools.com/cssref/pr_text_text-align.asp">text horizontally-centered</a>, and give it a <a href="http://www.w3schools.com/cssref/pr_margin-top.asp">top margin</a> of 5px so there's a bit of separation between the frame and the caption.</p>

                    <p>The thumbnail images are actually 300px by 300px so that they will still look good when we zoom them, so we need to reduce their width in their normal state. For the <code>&lt;img&gt;</code> elements inside the <code>&lt;figure&gt;</code> elements, set their <a href="http://www.w3schools.com/cssref/pr_dim_width.asp">width</a> to 200px, and give them a 10px solid <a href="http://www.w3schools.com/cssref/pr_border.asp">border</a> in the color #EEE (light gray). Also round the corners just slightly by using a 2px <a href="http://www.w3schools.com/cssref/css3_pr_border-radius.asp">border radius</a>.</p>

                    <h3>Add Transitions and Transforms</h3>

                    <p>At this point, you should have a static page showing the pictures as 200px by 200px thumbnails in a grid, and the thumbnails should reflow as you make your browser window wider or narrower. Now let's add that scaling effect when the mouse is hovered over an image.</p>

                    <p>We want to scale the entire <code>&lt;figure&gt;</code> on hover, so add a new style rule that uses <a href="http://www.w3schools.com/cssref/sel_hover.asp">the ':hover' pseudo-selector</a> on <code>&lt;figure&gt;</code> elements. In that rule, we want to apply two things: a scaling transform that makes the figure 1.5 times as large; and a box shadow.</p>

                    <p>Currently, the scaling transform requires the use of vendor-specific properties as well as the now-standard 'transform' property. Most browsers are starting to support the standard transform property, but older versions still require the vendor-specific ones. Thankfully, we can just specify all of them, putting the standard one last, and our rule will continue to work both with older browsers and newer versions in the future. In a few more years, these vendor-specific properties probably won't be necessary anymore, but for now, you should include them. The properties in your rule should look like this:</p>

                    <pre><code>
box-shadow: 2px 2px 6px #555;

-webkit-transform: scale(1.5);
-moz-transform: scale(1.5);
-o-transform: scale(1.5);
-ms-transform: scale(1.5);
transform: scale(1.5);  
                    </code></pre>

                    <p>These settings tell the browser to scale the element by 150%, and add a box shadow so that it appears like it's jumping off the screen. Scaling is only one kind of transform you can do: see the <a href="http://www.w3schools.com/css3/css3_2dtransforms.asp">CSS reference page on transforms</a> for more details.</p>

                    <p>After you save everything, you should now be able to hover over a figure and see it zoom to 1.5 size. But the effect will be instantaneous, not smoothly animated as in the video. To add this smooth transition from normal size to 1.5 size, we need to add a transition property to the style rule that applies to the <code>&lt;figure&gt;</code> elements in general (not the one that applies to their hover state). Transition properties are specified on the base style rule, and are then applied when transitioning to a rule based on user interaction (like <code>figure:hover</code>).</p>

                    <p>The standardized transition property, like the transform property, is still relatively new, so older browser versions require vendor prefixes. The properties in your rule should look like this:</p>

                    <pre><code>
-webkit-transition: all 0.2s ease;
-moz-transition: all 0.2s ease;
-o-transition: all 0.2s ease;
-ms-transition: all 0.2s ease;
transition: all 0.2s ease;                        
                    </code></pre>

                    <p>These settings tell the browser to transition all property changes over the course of 0.2 seconds, using the 'ease' timing function. There are a few different kinds of timing functions, and you can choose to transition only particular properties instead of all of them. See the <a href="http://www.w3schools.com/css3/css3_transitions.asp">CSS reference page on transitions</a> for more details.</p>

                    <p>Lastly, we also need to add a transition to smooth out the opacity change when the reader hovers over the logo image. Add the same properties as above to the base style rule for the logo, and that should cause the opacity change on hover to smoothly transition over the course of 0.2 seconds.</p>

                </section>

                <section id="github">
                    <h2>Stage, Commit, and Push to GitHub</h2>

                    <!--#include virtual="../inc/commit.html" -->
                </section>

                <section id="submit">
                    <h2>Publish Site and Submit URL via Canvas</h2>

                    <!--#include virtual="../inc/publish.html" -->

                    <p>After you've published your site and verified that it's working, <strong>submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288920">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299188">Section B</a>)</strong>.</p>
                </section>

                <section id="optional-steps">
                    <h2>Optional Steps</h2>

                    <p>If you finish early, or just want an extra challenge, try one or more of the following optional steps.</p>

                    <h3>Add a Rotation Transform</h3>

                    <p>Scale is only one kind of transform you can add to your elements. Another interesting one is <code>rotate()</code>, which rotates the element by a specified number of degrees. Let's add a rotate transform to our existing scale transform.</p>

                    <p>The transform (and vendor-prefixed versions of that property) can accept multiple transform functions on the same line, separated by spaces. So adding the rotate transform would make your properties look like this:</p>

                    <pre><code>
-webkit-transform: scale(1.5) rotate(-5deg);
-moz-transform: scale(1.5) rotate(-5deg);
-o-transform: scale(1.5) rotate(-5deg);
-ms-transform: scale(1.5) rotate(-5deg);
transform: scale(1.5) rotate(-5deg);
                    </code></pre>

                    <p>Here I'm just rotating the figure by -5 degrees (5 degrees to the left). You can set this to any number of degrees you want to. Once you have the <code>-5deg</code> version working, try setting it to <code>360deg</code>. That will make the figure spin around completely as it scales up!</p>

                    <p>Note that as you increase the amount of rotation, you might need to also increase the speed of the transition. Our <code>transition</code> property (as well as the vendor-prefixed versions) were initially set to 0.2 seconds, but a full-360 spin would look better when animated over a full second (<code>1s</code>).</p>

                    <h3>Make the Logo Pulse Using an Animation</h3>

                    <p>Transforms and transitions can get you quite far, but they can only animate a change between two states. CSS 3 also includes a more general mechanism for animating element state changes over a series of timepoints. Let's use that to do a simple and hopefully unobtrusive animation: making the logo image visually pulse.</p>

                    <p>Animations are specified in your CSS file, but they require you to add two separate things: a named keyframes rule; and an animation property on the rule for the element(s) you want to animate.</p>

                    <p>The named keyframes rule should be specified <em>before</em> any rule in which you want to refer to it. So it's best to specify your keyframe rule at the top of your CSS file, just after the @import directives. In this case, it should look like this:</p>

                    <pre><code>
@-webkit-keyframes pulse {
    0%      {opacity: 0.3;}
    50%     {opacity: 1;}
    100%    {opacity: 0.3;}
}
@keyframes pulse {
    0%      {opacity: 0.3;}
    50%     {opacity: 1;}
    100%    {opacity: 0.3;}
}
                    </code></pre>

                    <p>Unfortunately, current versions of WebKit (the rendering engine used by Chrome and Safari) still require a vendor-prefixed version of @keyframes, so we have to specify our rule twice: once using the <code>@-webkit-keyframes</code> directive, and again using the standardized <code>@keyframes</code> directive.</p>

                    <p>The second token in the directive is a name for the animation that you'll use later in the animation property, and in this case, we've named it 'pulse' since that's what it will do. Inside the keyframes block, you then specify a number of state transitions, from 0% to 100%. Each transition can specify any number of CSS properties. In this example, I've specified three states: a starting state (0%), a mid-way state (50%), and a final state (100%). For each state, I'm specifying only one property to keep this simple. We will be animating the opacity property from 0.3 to 1 and back to 0.3. For a full description of what you can do in keyframes rules, see the <a href="http://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp">CSS keyframes reference</a>. These can get quite complicated, moving elements around on the screen and even transforming them using the various transform functions.</p>

                    <p>The keyframes rule declares the animation, but to use it, we need to add an <code>animation</code> property (as well as a webkit prefixed version) to the rule that applies to our logo image element. Add properties that looks like this:</p>

                    <pre><code>
-webkit-animation: pulse 5s infinite;
animation: pulse 5s infinite;
                    </code></pre>

                    <p>This tells the browser to apply the 'pulse' animation we defined earlier to elements selected by the our rule, play that animation over the course of 5 seconds, and loop the animation infinitely. To see all the various settings you can use here, see the <a href="http://www.w3schools.com/cssref/css3_pr_animation.asp">CSS animation property reference</a>.</p>

                    <p>If you did everything correctly, you should see the logo image visually pulse, starting at only 30% opacity, increasing to full opacity, and then fading back 30% again.</p>

                </section>



            </article>
        </div> <!-- .container -->
    </body>
</html>