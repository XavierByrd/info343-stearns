<!doctype html>
<html>
    <head>
        <!--#include virtual="../inc/common-head.html" -->

        <meta name="description" content="INFO 343 MVC Lab">
        <title>Lab 8: Shopping Cart</title>
    </head>
    <body>
        <div class="container">

            <!--#include virtual="../inc/crumbtrail.html" -->

            <article class="lab">

                <section id="intro">
                    <div class="page-header lab-title">
                        <h1>Lab 8: Shopping Cart</h1>
                        <p class="lead">Object-Oriented JavaScript and MVC</p>
                    </div>

                    <p>In class this week, we learned how to do object-oriented programming in Java, and how to use the Model-View-Controller (MVC) design pattern to build interactive, transactional web applications. In this lab, you'll apply both of those skills to complete the code for a typical shopping cart application.</p>

                    <h2>General Instructions</h2>
                    <ol>
                        <li>If you get stuck at any point, search the Internet, ask your neighbor, or ask the TA for help.</li>

                        <li>At the end of the lab, submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288925">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299192">Section B</a>).</li>

                        <li>If you don't finish all the required tasks during our lab time, finish them over the weekend and submit your published site URL before 8:00am on Monday morning.</li>

                        <li>If you finish all the required steps, go on and try some of the <a href="#optional-steps">optional ones</a>. Remember that you have to do at least one of the optional steps in order to get 10/10 on the Completeness portion of your grade. If you do only the required steps, you'll get 9/10 on that portion.</li>
                    </ol>

                    <h2>Required Steps</h2>
                    <ol>
                        <li><a href="#fork">Fork my lab8 repository and clone to your lab machine</a></li>

                        <li><a href="#review">Review the Supporting Code and Data</a></li>

                        <li><a href="#cart">Implement the Cart Model and View</a></li>

                        <li><a href="#controller">Implement the Controller</a></li>

                        <li><a href="#github">Stage, Commit, and Push to GitHub</a></li>

                        <li><a href="#submit">Publish your site to your web hosting server and submit the site URL via Canvas</a></li>
                    </ol>
                </section>

                <section id="fork">
                    <h2>Fork and Clone</h2>

                    <p>First, go to <a href="https://github.com" target="_blank">GitHub</a> and sign into your account.</p>

                    <p>Next, go to my <a href="https://github.com/drstearns/lab8" target="_blank">lab8 repository on GitHub</a>, and fork it. Then clone <strong>your forked repository</strong> to your local lab machine using SourceTree. You've done this several times now, but if you've forgotten how, refer to the instructions in <a href="../forms/">one of our previous labs</a>.</p>
                </section>

                <section id="review">
                    <h2>The Application</h2>

                    <p>Before we start coding, let's first take a look at the application we'll be building, review the data behind it, and look through the supporting code I've provided for you. This is what the page will look like when you're done, and have added a few things to the cart:</p>

                    <p><img class="screen-shot img-responsive" src="img/shopping-cart.png" alt="Shopping cart page in action"></p>

                    <p>Down the left are a series of movies, with buttons next to each that when clicked, will add the corresponding movie in the corresponding format to the user's shopping cart, which is shown on the right. Each click will add a new item to the cart, and the cart will re-render to show not only its contents, but also a total price. Each item in the cart has a small button next to it, which can be clicked to remove that item from the cart.</p>

                    <p>The 'Place My Order' button will get the contents of the current cart as a JSON string, and write that to the console. As an optional step, you can post this JSON to a URL I've created and it will respond back with a confirmation message you can display to the user. In another optional step, you can save the current cart to local storage when the user leaves the page (or closes the browser window), and reload it when the user returns.</p>

                    <h2>Review the Data</h2>

                    <p>Now that you know what the page should look like and do, we next need to look at the data structure for the list of movies and their prices. We will load that data from the URL <a href="https://courses.washington.edu/info343/ajax/movies/" target="_blank">https://courses.washington.edu/info343/ajax/movies/</a>. Click on that link now so you can see the data in new browser tab.</p>

                    <p>This URL returns an array of objects in JSON, and each object has the properties <code>id</code>, <code>title</code>, <code>pic</code>, and <code>prices</code>. The last of these is actually a sub-object with the properties <code>dvd</code> and <code>bluray</code>, representing the price for the DVD and Blu-Ray versions of the movie respectively.</p>

                    <p>Your controller will fetch this JSON and use the MoviesView (already implemented in moviesView.js) to render each movie's information and add-to-cart buttons. The MovieView will then trigger 'addToCart' events every time one of those buttons is clicked. Your controller will catch those events and add the selected movie and format to the Cart model (which you will implement) as a new item. This will automatically re-render the CartView (which you will also implement) to show the newly-expanded contents of the cart.</p>

                    <h2>Review the Supporting Code</h2>

                    <p>So that you can complete this lab in a reasonable amount of time, I've included implementations of a basic ListModel, TemplateListView, and TemplateView that you can build upon. Let's look at those now.</p>

                    <p>Open the file <code>js/models.js</code> and look through the code. The <code>createListModel()</code> function creates an object that knows how to do a few things:</p>

                    <ul>
                        <li>hold an array of objects, which are referred to as 'items'</li>
                        <li>return all the items</li>
                        <li>return one specific item given an id</li>
                        <li>add an item to the array and trigger a 'change' event</li>
                        <li>remove an item from array and trigger a 'change' event</li>
                    </ul>

                    <p>Your Cart model will inherit from this basic ListModel, adding a method to calculate the total price of the cart, and produce a JSON representation of the cart items.</p>

                    <p>Now open the file <code>js/views.js</code> and look through the code. The <code>createTemplateListView()</code> function towards the bottom of the file creates an object that knows how to render a ListModel by merging each object in the model with an HTML template and appending the populated clones to a container element (sound familiar?). It also has code that listens for the model's 'change' event, and automatically re-renders the view. This TemplateListView uses another object, a TemplateView (defined at the top of the file), to handle merging a single object with the template.</p>

                    <p>You CartView will inherit from this TemplateListView object, adding code to update the total price element. You will also implement a CartItemView object, which will inherit from TemplateView, and handle the remove item button click.</p>

                    <p>Both the <code>createListModel()</code> and <code>createTemplateListView()</code> functions accept a single parameter called <code>config</code>. This should be an plain JavaScript object with any properties you want to set on the newly created object. The comments above both of those functions explains what properties should be included in that config object.</p>
                    
                </section>

                <section id="cart">
                    <h2>Implement the Cart Model</h2>

                    <p>Open the file <code>js/cart.js</code>. This is where you will implement the Cart model object by completing the function <code>createCartModel()</code>. This is a prototypal-style factory function that should build and return an object instance that inherits from a ListModel object instance, adding two extra methods.</p>

                    <p>Start by calling <code>createListModel(config)</code> and assigning the return value of that function to a new variable called <code>model</code>. This will create a new ListModel object instance, to which you can add the new methods:</p>

                    <pre><code>
var model = createListModel(config);
                    </code></pre>

                    <p>Next, add a method to the <code>model</code> called <code>getTotalPrice()</code>. Remember that a 'method' in JavaScript is really just a function that has been assigned to a property of the object, so the syntax for adding a new method looks like this:</p>

                    <pre><code>
model.getTotalPrice = function() {
    
}; //getTotalPrice()
                    </code></pre>

                    <p>The code inside this new function should loop over the model's items array (<code>this.items</code>), adding up the prices of each item (<code>this.items[idx].price</code>) and returning the total price, formatted to 2 decimal places (<code>totalPrice.toFixed(2)</code>). Try to implement this routine yourself, but if you get stuck, the code should look something like this:</p>

                    <pre><code>
var idx;
var totalPrice = 0;
for (idx = 0; idx &lt; this.items.length; ++idx) {
    totalPrice += this.items[idx].price;
}
return totalPrice.toFixed(2);
                    </code></pre>

                    <p>The second method we need to add to this model object is <code>toJSON()</code>, which should return a JSON representation of the cart items. Use the sample code above to add this second method. The code inside the new function should simply return the result of <code>JSON.stringify(this.items)</code>. The <code>JSON.stringify()</code> method is built-in to the browser's JavaScript interpreter, and will produce a JSON representation of whatever is passed to it as the first parameter.</p>

                    <p>Now that we've created the model object and added the two new methods to it, the last step is to return the new model object from the <code>createCartModel()</code> function. Write the line of code to return your <code>model</code> variable from the function.</p>

                    


                    <h2>Implement the Cart Item View</h2>

                    <p>Now that we have a model object for the cart, we next need to implement the two view objects to display the model on screen. The first is the view that knows how to render a single item in the cart. This TemplateView I provided can do most of the work for us, but we need to do one extra thing after it renders: handle the click of the remove item button, and remove the relevant item from the cart.</p>

                    <p>Open the file <code>js/cartItemView.js</code>. This is where you will implement the CartItemView object by completing the function <code>createCartItemView()</code>. This is a prototypal-style factory function that should build and return an object instance that inherits from a TemplateView object instance, adding one extra method.</p>

                    <p>Start this function by calling <code>createTemplateView(config)</code> and setting the return value to a new variable called <code>view</code>:</p>

                    <pre><code>
var view = createTemplateView(config);
                    </code></pre>

                    <p>This will create a new TemplateView instance that we can now augment by adding an extra method: afterRender(). The TemplateView object will call this method (if it exists) after it has rendered the model object using the template. It will pass a reference to the cloned template HTML as the first parameter, and a reference to the current model object as the second parameter. We can implement this method to handle the remove-item button click, removing the associated cart item from the cart model.</p>

                    <p>Use the sample code above to add a new method to the <code>view</code> object called <code>afterRender</code>. The function should take two parameters called <code>clonedTemplate</code> and <code>model</code>. Inside that new function, we'll use jQuery's <code>find()</code> method to find the remove-item button by its class name, and then use jQuery's <code>click()</code> method to catch the button click, and remove the current item from the cart. The code should look like this:</p>

                    <pre><code>
view.afterRender = function(clonedTemplate, model) {
    clonedTemplate.find(&#039;.remove-item&#039;).click(function(){
        view.cartModel.removeItem(model);
    });
};
                    </code></pre>

                    <p>The <code>view.cartModel</code> property is a reference to the Cart model you implemented in the previous step, and this reference will be set by the CartView you will implement in the next step. The removeItem() method of the cart model is inherited from ListModel, and this method will trigger a 'change' event each time an item is removed from the model. The prototype object we'll use for the overall cart view will be listening for this event, and automatically re-render the view when it receives it. Thus is the power of an MVC architecture!</p>

                    <p>Finally, return the <code>view</code> variable from the <code>createCartItemView()</code> function so that the caller can get the new view instance.</p>




                    <h2>Implement the Cart View</h2>

                    <p>We've implemented the model object for the cart, and the view object that can render a single item in the cart, but now we need to implement the view that will display all the items in the cart, as well as the total price. The TemplateListView object can do the former for us, but we will have to add the code to do the latter.</p>

                    <p>Open the <code>js/cartView.js</code> file. This is where you will implement the CartView object by completing the function <code>createCartView()</code>. This is a prototypal-style factory function that should build and return an object instance that inherits from a TemplateListView object instance, adding one extra method.</p>

                    <p>Before we call <code>createTemplateListView()</code>, we first need to add a couple of properties to the <code>config</code> object that is passed to our function, and which we will in turn pass to the <code>createCartItemView()</code> and <code>createTemplateListView()</code> methods.</p>

                    <p>The first property to add is called <code>cartModel</code>, and it should be set to <code>config.model</code>. This is the property that we used in the cart item view when the user clicks on the remove-item button.</p>

                    <p>The second property is called <code>templateView</code>, and it should be set to an instance of a cart item view, which you can create using the <code>createCartItemView()</code> function you just implemented. The TemplateListView requires this property in order to know which object it should use to render each item in the list.</p>

                    <p>The first two lines of your function should thus look like this:</p>

                    <pre><code>
config.cartModel = config.model;
config.templateView = createCartItemView(config);
                    </code></pre>

                    <p>Next, call <code>createTemplateListView(config)</code> and assign the return value to a new variable called <code>view</code>:</p>

                    <pre><code>
var view = createTemplateListView(config);
                    </code></pre>

                    <p>I've written TemplateListView such that it will call the method <code>afterRender()</code> after it renders the view (if the derived object doesn't implement this method, it will just skip this). If we implement this method, we can update the total price. Let's add that method now:</p>

                    <pre><code>
view.afterRender = function() {

}; //afterRender()
                    </code></pre>

                    <p>Inside that method, we need to add code to update the total price element. We already added a method to our Cart model that can give us the total price (<code>this.model.getTotalPrice()</code>). When we create this view in our controller (next step) we will set a property on it called <code>totalPrice</code>, which will be a jQuery object containing the total price HTML element. Therefore, updating the total price can be done with code like this:</p>

                    <pre><code>
this.totalPrice.html(this.model.getTotalPrice());
                    </code></pre>


                    <p>Lastly, remember to return your <code>view</code> variable from the <code>createCartView()</code> function so that the caller gets a reference to the new view.</p>

                </section>

                <section id="controller">
                    <h2>Implement the Controller</h2>

                    <p>We've now implemented all the models and views we need, so our last task is to implement the controller that stitches all the pieces together.</p>

                    <p>Open the file <code>js/controller.js</code>. This is where you will implement the controller. A controller is very similar to the code you've been writing for web pages so far&mdash;it starts with a jQuery document ready function:</p>

                    <pre><code>
$(function(){

}); //doc ready()
                    </code></pre>

                    <p>Inside the document ready function, we first need to create an object that will translate between the format codes for our movies ('dvd' and 'bluray') to nicer-looking labels ('DVD' and 'Blu-Ray'). That object would look like this:</p>

                    <pre><code>
var formatLabels = {
    dvd: &#039;DVD&#039;,
    bluray: &#039;Blu-Ray&#039;
};
                    </code></pre>

                    <p>After that little object, we should now create our cart model and view. Use the <code>createCartModel()</code> function to create the cart, and the <code>createCartView()</code> function to create the cart view. The latter function will require a configuration object with these properties:</p>

                    <pre><code>
var cartModel = createCartModel();

var cartView = createCartView({
    model: cartModel,
    template: $(&#039;.cart-item-template&#039;),
    container: $(&#039;.cart-items-container&#039;),
    totalPrice: $(&#039;.total-price&#039;)
});
                    </code></pre>
                    
                    <p>Here we set the <code>model</code> property to the cart model we create, and the <code>template</code>, <code>container</code>, and <code>totalPrice</code> properties are set to jQuery objects containing their respective page elements.</p>

                    <p>Next, we need to create the movies model and view, which I already implemented for you. The code to create them looks like this:</p>

                    <pre><code>
var moviesModel = createMoviesModel({
    url: &#039;https://courses.washington.edu/info343/ajax/movies/&#039;
});

var moviesView = createMoviesView({
    model: moviesModel,
    template: $(&#039;.movie-template&#039;),
    container: $(&#039;.movies-container&#039;)
});

//refresh to get movies from server
moviesModel.refresh();
                    </code></pre>

                    <p>The movies model is initialized with a <code>url</code> property containing the URL for the movies JSON data. The movies view is initialized with a reference to the movies model, its template element, and container element. Finally, we call the <code>refresh()</code> method on the model to load the movies data from the URL.</p>

                    <p>At this point, you should be able to open the index.html page in your browser and see the movies listed down the left, and an empty cart displayed on the right. If you don't see that, look in the Browser's developer tools console for error messages, and correct any errors you might have made.</p>

                    <p>Next, we need to respond to the add-to-cart buttons shown next to each movie, and add a corresponding item to the cart. The movies view will trigger an 'addToCart' event when the user clicks on one of those buttons, passing a data object that contains two properties: the movie ID, and the format code ('dvd' or 'bluray'). We need to listen for this event, and use the passed data to add a new item to the shopping cart. The code would look like this:</p>

                    <pre><code>
//when the movies view triggers &#039;addToCart&#039;
//add a new item to the cart, using the supplied
//movieID and format
moviesView.on(&#039;addToCart&#039;, function(data){
    var movie = moviesModel.getItem(data.movieID);
    if (!movie)
        throw &#039;Invalid movie ID &quot;&#039; + movieID + &#039;&quot;!&#039;; 

    cartModel.addItem({
        id: movie.id,
        title: movie.title,
        format: data.format,
        formatLabel: formatLabels[data.format],
        price: movie.prices[data.format]
    });
}); //addToCart event
                    </code></pre>

                    <p>This code uses the <code>on()</code> method supported by any event source to register a handler function for the 'addToCart' event. This function is passed one parameter, which is a data object containing the properties <code>movieID</code> and <code>format</code>. We first use the movies model <code>getItem()</code> method to find the movie by its ID, and then add a new item to the cart using the various movie properties. Note how we use the <code>formatLabels</code> object we created earlier to translate between the format code and a nicer label we can show to the user.</p>

                    <p>Our final step is to handle the place-order button click. For now, we'll just write the cart JSON to the <code>console.log</code>. If you choose to do <a href="#optional-steps">the optional steps</a>, you can write the code to post that JSON to another URL and get a confirmation message.</p>

                    <p>Use the jQuery function to select the button by its class name ('.place-order'), and use the <code><a href="http://api.jquery.com/click/">click()</a></code> method on the resulting jQuery object to register a click event handler. In that event handler function, call the method <code>cartModel.toJSON()</code> and write the return value to the console using <code>console.log()</code>.</p>

                </section>

                <section id="github">
                    <h2>Stage, Commit, and Push to GitHub</h2>

                    <!--#include virtual="../inc/commit.html" -->
                </section>

                <section id="submit">
                    <h2>Publish Site and Submit URL via Canvas</h2>

                    <!--#include virtual="../inc/publish.html" -->

                    <p>After you've published your site and verified that it's working, <strong>submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288925">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299192">Section B</a>)</strong>.</p>
                </section>

                <section id="optional-steps">
                    <h2>Optional Steps</h2>

                    <p>If you get done early, or just want the extra challenge, try some of these optional steps.</p>

                    <h3>Post the Cart JSON</h3>

                    <p>In the required steps, I just have you split the cart JSON to the console log when the user clicks the place order button. In this optional step, we'll post that JSON to a web server, and notify the user of the response.</p>

                    <p>Remove the code from the existing place order button click event handler function. We'll replace it with an AJAX call.</p>

                    <p>To do the post, you should use the jQuery method <code>$.ajax()</code>. This is a more flexible and powerful method than <code>$.post()</code>, which we've used before in class. The <code>$.ajax()</code> method takes one parameter, which is an object with a set of properties:</p>

                    <pre><code>
$.ajax({
    url: &#039;https://courses.washington.edu/info343/ajax/movies/orders/&#039;,
    type: &#039;POST&#039;,
    data: cartModel.toJSON(),
    contentType: &#039;application/json&#039;,
    success: function(responseData) {
        //code to run after successful post

    },
    error: function(jqXHR, status, errorThrown) {
        //error with post--alert user
        alert(errorThrown || status);
    }
}); //ajax()

                    </code></pre>

                    <p>The <code>url</code> property specifies the URL to post to, and the <code>type</code> property specifies that this should be done as a POST rather than a GET. The <code>data</code> property is set to our cart JSON, and the <code>contentType</code> property is set to the official MIME type for JSON ('application/json'). This content type will be passed as the <code>Content-Type</code> HTTP header when the POST is made to the server, which will let the server know that the post body content is JSON and not something else.</p>

                    <p>The <code>success</code> property is set to a callback function that is called by jQuery after a successful response from the server. The jQuery library will pass a parameter to this function, which will be the parsed data returned by the server. In this case, that responseData will be a JavaScript object with one property: message.</p>

                    <p>In the success callback function, write the code to display the <code>responseData.message</code> to the user in an <code>alert()</code>. Or if you're feeling adventurous, add a <code>&lt;p class=&quot;message&quot;&gt;</code> to the top of the page that is initially hidden (create a new style rule for <code>.message</code> with <code>display: none</code>), set that paragraphs HTML to be the response message and use jQuery's <code>fadeIn()</code> method to show it.</p>

                    <p>Lastly, once you've got a success message back from the server, you should clear out the items in the current cart (since that order has now been posted). This is easily done using <code>cartModel.setItems([]);</code>. That will reset the items array to an empty one, and the model will trigger its change event, causing the cart view to re-render.</p>


                    <h3>Save and Restore the Cart Between Page Views</h3>

                    <p>If the user leaves our current page and returns to it later, any items in the user's cart will be gone. But we can save the current cart JSON to local storage when it's changed, and recreate the cart items when the page is loaded again.</p>

                    <p>Our first step is to save the current cart JSON to local storage whenever it changes. Fortunately, models trigger a 'change' event when they are changed, so our controller can listen for this event, and react accordingly.</p>

                    <p>At the bottom of your document ready function in controller.js, use the <code>cartModel.on()</code> method to register an event handler callback function for the model's change event:</p>

                    <pre><code>
cartModel.on('change', function(){
    localStorage.setItem('cart', cartModel.toJSON());
});
                    </code></pre>

                    <p>Now we are saving the current cart JSON to local storage whenever it changes, under the key 'cart'.</p>

                    <p>Next, add this code in your controller's document ready function, <strong>just after</strong> you create the cart view and model:</p>

                    <pre><code>
var cartJSON = localStorage.getItem('cart');
if (cartJSON &amp;&amp; cartJSON.length &gt; 0) {
    cartModel.setItems(JSON.parse(cartJSON));
}
                    </code></pre>

                    <p>This block will get the cart JSON out of local storage, and if there was any, it will parse that and pass the results to the cart model's <code>setItems()</code> method. This will reset the cart items and trigger a change event, which the cart view will hear, causing it to re-render the cart.</p>

                </section>

            </article>

        </div> <!-- .container -->
    </body>
</html>