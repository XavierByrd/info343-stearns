<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="INFO 343 File Management Lab">
    <meta name="author" content="David Stearns">
    <link rel="shortcut icon" href="https://ischool.uw.edu/favicon-small.png">

    <link rel="stylesheet" href="../../lib/bootstrap/css/bootstrap.min.css" media="screen">
    <link rel="stylesheet" href="../../css/footer.css">

    <link rel="stylesheet" href="../css/labs.css">

    <title>INFO 343 File Management Lab</title>

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="../../lib/html5shiv/html5shiv.js"></script>
      <script src="../../lib/respond/respond.min.js"></script>
    <![endif]-->

</head>
<body>
  <div class="container">

    <nav>
      <ol class="breadcrumb">
        <li><a href="../../..">INFO 343</a></li>
        <li><a href="../..">Sections A &amp; B</a></li>
        <li><a href="../../#labs">Labs</a></li>
        <li>Lab 1</li>
    </ol>
</nav>

<article class="lab">

  <div class="page-header lab-title">
    <h1>Lab 1: Managing Your Files</h1>
    <p class="lead">Text Editors, Version Control, and FTP</p>
</div>


<p>Welcome to your first lab for INFO 343! Since we've only had one brief class so far, we will use this lab to practice using a few file management tools that nearly every web development project requires:</p>

<ol>
    <li>a good text editor optimized for web development</li>
    <li>a collaborative version control system (VCS) for managing file versions</li>
    <li>a graphical FTP tool for moving files up to a web server</li>
</ol>

<p>In other words, we won't worry all that much today about what is <em>inside</em> our files; rather we will learn how to effectively manage the files themselves, as most web projects will generate <em>a lot</em> of them, and many developers may work on them at the same time. We will utilize these tools throughout the course, and most web development jobs will expect that you know how to use them well.</p>

<p>This lab will also be a bit different than the others. Normally, you would work through these instructions on your own, consulting your friends and the TA when you needed help. But during this lab, Dr Stearns will interactively guide you through using some of the more complex tools. This is partly because the quarter started mid-week and we haven't had enough class time for me to show you these tools yet, and partly because these tools are better learned with some in-person guidance.</p>

<p>If you find yourself able to do these tasks more quickly than others, feel free to plow ahead and do some of the <a href="#steps-optional">optional tasks</a> as well...go ahead...I dare you.</p>

<h2>General Instructions</h2>
<ol>
    <li>If you get stuck at any point, ask your neighbor, the TA or Dr Stearns for help.</li>
    <li>At the end of the lab, submit your published site URL via the <a href="https://canvas.uw.edu/courses">Canvas assignment</a> for this lab.</li>
    <li>If you don't finish all the required tasks during our lab time, finish them over the weekend and submit your published site URL before 8:00am on Monday morning.</li>
</ol>

<h2>Required Steps</h2>
<ol>
    <li><a href="#step-repository">Create a GitHub repository</a></li>
    <li><a href="#step-page">Write a basic web page</a></li>
    <li><a href="#step-validate">Validate and correct any problems with your page</a></li>
    <li><a href="#step-scc">Manage your files in a version control system</a></li>
    <li><a href="#step-ftp">Upload your files to the web server via FTP</a></li>
    <li><a href="#step-submit">Submit your published site URL via Canvas</a></li>
</ol>

<h3 id="step-repository">Create a GitHub Repository</h3>

<p>Many students think that version control systems (VCS) aren't necessary until you are working in a large team, but professional developers know different: a good VCS can help you manage your files, track changes, try new ideas without jeopardizing your working code, and easily rollback to a previous version when you mess up something. Even projects that start out small tend to grow into large, collaborative ones, so it's always a good idea to use a VCS for every project you do.</p>

<p>In this lab we will use one of the most popular VCSs: <a href="http://git-scm.com/">Git</a> and the related public repository, <a href="https://github.com/">GitHub</a>. Git is the command-line engine that does most of the work, and GitHub provides a space on the Web where developers can collaborate on projects.</p>

<p>Git is a command-line utility, but there are many graphical tools available that make it easier to use. Today we will use a popular one that is free and available on multiple platforms: <a href="http://www.sourcetreeapp.com/">SourceTree</a>. It is a powerful graphical tool that exposes nearly all the underlying Git functionality. As a result, its user interface is also a bit cluttered and may seem overwhelming at first, but you will get the hang of it quickly.</p>

<p class="alert alert-warning">If you haven't already created a <a href="https://github.com/">GitHub account</a>, do so now by going to <a href="https://github.com/">GitHub</a> and completing the registration.</p>

<p>I'll now demonstrate how to create a new repository on <a href="https://github.com/">GitHub</a>, and you should follow along, creating a new public repository of your own named <code>lab1</code>. We'll then clone that to your local lab machine using SourceTree.</p>


<h3 id="step-page">Write a Basic Web Page</h3>

<p>Now that your repository is ready, you will next create a basic profile page for your favorite fictional character and add it to the repository directory. This can be any character from a book, story, film, TV show, movie, comic book, online video, etc. Since we've covered HTML only briefly so far, I have provided you a basic HTML template file to start with, and you will add only a bit of basic content.</p>

<p>You'll do this step and the following one on your own. Following these instructions:</p>

<ol>
    <li>Download the <a href="template.html">basic HTML page template</a> to the local repository directory you created in the first step.</li>

    <li>Rename the file you just downloaded to 'index.html'. Most web servers will look for a file named index.html and return it if the browser only requests the directory in which the file exists.</li>

    <li>Open index.html in your preferred text editor. If you don't have a preferred editor, try <a href="http://www.sublimetext.com/">Sublime Text</a> if it is installed on your lab machine. This is a very powerful editor optimized for web development, and is currently quite popular amongst professional web developers.</li>

    <li>Find the <code>&lt;title&gt;</code> tag in the <code>&lt;head&gt;</code> section, and replace its content with the name of your character.</li>

    <li>Now add some textural content within the <code>&lt;body&gt;</code> tag:
        <ol>
        <li>Add the character's name as a <a href="http://www.w3schools.com/tags/tag_hn.asp">top-level heading</a>.</li>

        <li>Add a <a href="http://www.w3schools.com/tags/tag_p.asp">paragraph</a> that describes the character in general terms.</li>

        <li>Add another paragraph naming the source of the character (the name of the book/story/movie/show/etc in which that character appeared), and make that name be a <a href="http://www.w3schools.com/tags/tag_a.asp">hyperlink</a> to an authoritative page on that source (e.g., a Wikipedia page, a movie/show homepage, etc.)</li>

        <li>Add a picture to the page:
            <ol>
                <li>Create a sub-folder in your local repository directory called <code>img</code>.</li>

                <li><a href="http://www.google.com/imghp">Find a picture of your character</a>, and download that picture file to your newly-created <code>img</code> directory.</li>

                <li>Now <a href="http://www.w3schools.com/tags/tag_img.asp">add the picture</a> to your HTML page. If the picture is particularly large, add a <code>width</code> or <code>height</code> attribute to make it more appropriately-sized.</li>
            </ol>
        </li>

        <li>Finally, at the bottom of your page, <strong>include <a href="http://www.w3schools.com/tags/tag_a.asp">a hyperlink</a> to your repository on the GitHub web site</strong>, with the link text being 'Source repository'. This link will help us verify that you were able to complete the first step, and thus give you full points on that part of the lab.</li>

        </ol>
    </li>
    <li>Save the page, and open it in a web browser to view it. You can simply double-click the file in the file explorer, and the operating system will open it in the default browser. To open it in another browser (e.g., Firefox or Chrome), launch that browser, choose File &rarr; Open..., and select your file.</li>

    <li>If everything looks OK, move on to the next step. If something doesn't look right, return to your text editor and figure out what's wrong. Ask your friends or the TA for help if you get stuck.</li>

</ol>

<h3 id="step-validate">Validate Your Page</h3>

<p>Older versions of HTML were rather loose and ill-defined, so browsers became quite forgiving of badly-written HTML. This is still mostly true today, so just because your page seems to "work" in a browser doesn't mean that it's properly-formed. Thankfully, there are some quick and easy tools you can use to validate your pages. We will use one of those to validate the page you just created:</p>

<ol>
    <li>Open the <a href="http://validator.w3.org/">W3C Validator Tool</a> in a web browser.</li>
    <li>Click on the "Validate by File Upload" tab. Note that you can also validate by direct input (which means copying/pasting your content into a text box instead of uploading a file), or by giving it a URL to an existing page on the web.</li>
    <li>In the "File:" input box, click the "Choose File" button and select your "index.html" file created in the previous section.</li>
    <li>Click the "Check" button, and view the results.</li>
    <li>If you see a red banner across the top saying you had errors, scroll down to see the details. Correct those errors and keep validating until it passes.</li>
</ol>

<h3 id="step-scc">Manage Your Files in Version Control System</h3>

<p>Your index.html and image files are in the repository directory, but they haven't yet been "committed" to the repository. Committing files means that you think they are ready to go, or at least are in a done-enough state that others can start looking at them. Let's now commit your files and see how Git can help you manage changes to those files over time.</p>

<p>I'll now walk you through using the SourceTree application to stage, commit, and push files to GitHub. Follow along, and do what I do. We'll also see how Git can save you when you make a horrible mistake....(eek!)</p>

<h3 id="step-ftp">Upload your Files to a Web Server via FTP</h3>

<p>Now that you have created your page and managed your files in a version control system, you now need to push them to your target web server. Many teams use their version control system to do this (see <a href="#steps-optional">optional steps</a> below), but the way we will practice today is uploading them via FTP. We will use a graphical FTP tool, but note that you can also use FTP from the command line, which is useful when writing automated scripts.</p>

<p>There are many graphical FTP tools to choose from, but the one we will use today is the one already installed on your lab machines: FileZilla.</p>

<p class="alert alert-warning">If you haven't already signed up for a free iSchool student web hosting account, do so now by going to the <a href="https://ischool.uw.edu/technology/web-hosting/manage">iSchool student web hosting management page</a>, and following the signup instructions. Note that you will need access to your UW email to complete the process.</p>

<p>I will now walk you through using FileZilla to upload your files. Follow along, and do what I do....</p>

<p>To verify that the files got to the server, open a web browser and enter the following URL into the address field, replacing <code><span class="token">your-netid</span></code> with your UW NetID: <code>http://webhost.ischool.uw.edu/~<span class="token">your-netid</span>/lab1/</code>. If you've done everything correctly, you should see your web page, including the image you added to the page.</p>

<h3 id="step-submit">Submit Your Site URL via Canvas</h3>

<p>When you are finished, go to the <a href="https://canvas.uw.edu/courses">Canvas</a> site for this class, click on the Lab 1 assignment link, and submit the URL to your published web site.</p>

<p>If you have extra time, consider doing one or more of the <a href="#steps-optional">Optional Steps</a> listed below.</p>

<h2 id="steps-optional">Optional Steps</h2>

<p>These steps are optional, but try them if you have extra time. You might learn something new.</p>


<h3 id="step-more-content">Adding More Content to Your Page</h3>

<p>If you already know a bit of HTML, or if you just happen to be quick and want the challenge of adding more content to your page, try adding one or more of the following:</p>

<ul>
    <li>A <a href="http://www.w3schools.com/html/html_lists.asp">list</a> of adjectives that describe your character.</li>
    <li>Emphasize a word or two in your text using the <code>&lt;em&gt;</code> tag.</li>
    <li>Make a few of your words strong using the <code>&lt;strong&gt;</code> tag.</li>
    <li>Add a copyright notice using the <a href="http://www.w3schools.com/html/html_entities.asp">HTML character entity</a> for the copyright symbol (&copy; 2013 Your Name).</li>
    <li>Add a comment to your page source using the <a href="http://www.w3schools.com/tags/tag_comment.asp">comment tag</a>.</li>
</ul>


<h3>Branching and Merging</h3>

<p>One of Git's more powerful features is branching. So far, you've been working on what is known as the 'master' branch in repository, but you can actually create many other branches from this master one, and merge changes between them.</p>

<p>Branching is useful when you are working on a new feature that might take some time to compete, but you also need to periodically do something on the master branch (quick bug fix, testing, etc). As you switch back and forth between your branches, Git updates your local files accordingly.</p>

<p>Let's practice creating a branch, making some changes, and merging those changes back into the master branch. If you get stuck on this, ask your TA or Dr Stearns for help.</p>

<ol>
    <li>Return to SourceTree.</li>

    <li>Click the "Branch" button at the top of the SourceTree window, and create a new branch in your repository named 'feature'. All changes to your files will now be done on this new branch, leaving the master branch as it was before you branched.</li>

    <li>Return to your text editor and make some changes to your index.html file. You might want to do the changes suggested in the <a href="#step-more-content">Adding More Content to Your Page</a> step.</li>

    <li>When you're finished with your changes, save the file, close your text editor and return to SourceTree.</li>

    <li>Stage and commit your changes. The commit will be made on the 'feature' branch, leaving the master branch alone.</li>

    <li>To verify this, switch back to the master branch by double-clicking it in the "Branches" list on the left. Now open index.html in your text editor. It should have reverted to the way it was before you branched. Now switch back to the feature branch (double-click it in the Branches list ont he left), and verify that your changes have re-appeared. (Note: you may need to close and reopen the file to see the changes if your text editor is not watching for external changes to the file)</li>

    <li>Assuming that your work on the new feature is done, it's now time to merge the feature branch commits into the master branch. <strong>Switch back to the master branch again</strong>, and click the Merge button at the top of the SourceTree window. At the top of the dialog, select the commit(s) you did on the feature branch that are not yet in the master branch. Click OK, and those changes will now also be applied to your master branch.</li>

    <li>Finally, delete the feature branch, since you don't need it anymore. Right-click on the feature branch in the Branches list and choose </li>

</ol>

<h3>Using Git and SSH to Synchronize the Web Server</h3>

<div class="double-black-diamond">
    <p class="alert alert-danger">If you are comfortable using the command line, you can try this step. Be careful though! Like Spiderman's Uncle reminded us, with great power comes great responsibility.</p>
</div>

<p>If your web server allows you SFTP access, it probably also allows you secure shell (SSH) access. SSH allows you to work at the command line on the web server itself, which opens up a number of interesting possibilities. One of those is the ability to update your web server by pulling the most recent files directly from your GitHub repository. You can use one quick command to update all the files on your web server to their most recent versions.</p>

<ol>
    <li>Go to your repository on the <a href="https://github.com/">GitHub web site</a>. On your repository home page, there should be a box on the right entitled 'HTTPS clone URL'. Click the copy to clipboard button, or select the URL and copy it to your clipboard. You'll need this later so you might want to paste it into a new text editor window.</li>

    <li>At the command line, SSH to the web server by entering the command <code>ssh <span class="token">your-netid</span >@webhost.ischool.uw.edu -p7822</code>, replacing <code><span class="token">your-netid</span></code> with your UW Net ID. The -p7822 part tells SSH to use port 7822 instead of the default port 22, which is what the iSchool student web hosts listen on.</li>

    <li>Enter your password at the prompt. This is your iSchool Student Web Hosting password, not your UW NetID password.</li>
    <li>Once connected, change to the public_html/ directory (<code>cd public_html/</code>).</li>
    <li>Now use git to clone your repository into a new sub-directory of public_html. To do that, Execute this command: <code>git clone <em>your-clone-url</em> lab1-git</code>, replacing <em>your-clone-url</em> with the URL you copied on the GitHub site. By default, git clone will create a directory with the same name as your GitHub repository, but since we've already created a directory with that name when FTPing the files, we use that last parameter to tell git to use a different directory name. In this case <code>lab1-git</code>.</li>
    <li>You should see a number of messages fly by, with the final one being 'Resolving deltas: 100% ... done.'</li>
    <li>To make sure everything worked, view your page in the browser by going to the following URL (where <code><span class="token">your-netid</span></code> is replaced with your UW NetID): <code>http://webhost.ischool.uw.edu/~<span class="token">your-netid</span>/lab1-git/</code></li>
</ol>

<p>Your repository is now cloned to the web server. After you make, commit, and push any changes to GitHub, you can then SSH over to the web server and run the command <code>git pull</code> from within the project directory. Any changes you've made since the last pull will be applied to the files, and your web site will be up to date!</p>

</article>

<!--#include virtual="../../inc/footer.html" -->

</div> <!-- .container -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="../../lib/bootstrap/js/bootstrap.min.js"></script>
</body>
</html>
