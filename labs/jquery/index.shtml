<!doctype html>
<html>
    <head>
        <!--#include virtual="../inc/common-head.html" -->

        <meta name="description" content="INFO 343 jQuery Lab">
        <title>Lab 5: jQuery</title>
    </head>
    <body>
        <div class="container">

            <!--#include virtual="../inc/crumbtrail.html" -->

            <article class="lab">

                <section id="intro">
                    <div class="page-header lab-title">
                        <h1>Lab 5: Sortable Address Book</h1>
                        <p class="lead">JavaScript, the DOM, and jQuery</p>
                    </div>

                    <p>In class this week, we learned how to use JavaScript and jQuery to dynamically alter a web page. In this lab, we will practice those skills by building a sortable company address book page.</p>

                    <h2>General Instructions</h2>
                    <ol>
                        <li>If you get stuck at any point, search the Internet, ask your neighbor, or ask the TA for help.</li>

                        <li>At the end of the lab, submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288923">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299190">Section B</a>).</li>

                        <li>If you don't finish all the required tasks during our lab time, finish them over the weekend and submit your published site URL before 8:00am on Monday morning.</li>

                        <li>If you finish all the required steps, go on and try some of the <a href="#optional-steps">optional ones</a>. Remember that you have to do at least one of the optional steps in order to get 10/10 on the Completeness portion of your grade. If you do only the required steps, you'll get 9/10 on that portion.</li>
                    </ol>

                    <h2>Required Steps</h2>
                    <ol>
                        <li><a href="#fork">Fork my lab5 repository and clone to your lab machine</a></li>

                        <li><a href="#code">Write the JavaScript to build the address book and resort it</a></li>

                        <li><a href="#github">Stage, Commit, and Push to GitHub</a></li>

                        <li><a href="#submit">Publish your site to your web hosting server and submit the site URL via Canvas</a></li>
                    </ol>
                </section>

                <section id="fork">
                    <h2>Fork and Clone</h2>

                    <p>First, go to <a href="https://github.com" target="_blank">GitHub</a> and sign into your account.</p>

                    <p>Next, go to my <a href="https://github.com/drstearns/lab5" target="_blank">lab5 repository on GitHub</a>, and fork it. You did this in our previous lab, but in case you forgot how to do so, click the "Fork" button at the top-right of the page and follow any instructions you receive. This will create a copy of this repository in your own account so that you have something to start with. The repository contains the various images and file stubs you'll need.</p>

                    <p>Once you've forked the repository, clone it to your local lab machine using SourceTree. We've done this a few times now, but if you've forgotten how, follow these steps:</p>

                    <ol>
                        <li>In <strong>your forked lab5 repository</strong> (not my original one) on the GitHub site, copy the 'HTTPS Clone URL' on the right side of the screen</li>
                        <li>Run the SourceTree app</li>
                        <li>Click on the Clone/New button in the upper-left of the screen</li>
                        <li>Enter the GitHub HTTPS clone URL you copied into the Source URL box</li>
                        <li>Hit tab, and SourceTree will automatically populate the Destination Path for you (usually a new folder named after your repository in the My Documents folder)</li>
                        <li>Click the 'Clone' button to clone the GitHub repository to your local machine</li>
                        <li>If you get stuck, as your TA or a neighbor for help</li>
                    </ol>
                </section>

                <section id="code">
                    <h2>Write the JavaScript</h2>

                    <p>In our previous labs we've concentrated on building and styling an HTML page. In this lab, we will instead concentrate on writing JavaScript. I've provided the basic HTML and CSS files for you, but you will add the JavaScript necessary to generate the address book entries, and resort them when the reader clicks on various buttons.</p>

                    <p>First, let's see what this page will look like when we are done:</p>

                    <p><img src="img/address-book-lastname.png" alt="Address book page sorted by last name" class="screen-shot"></p>

                    <p>If you look at the source for index.html, you will notice that the HTML markup for the various address book entries is not actually in there. Instead, we will be generating the entry HTML dynamically in JavaScript, based on a data structure that I have already populated for you.</p>

                    <p>The Sort By buttons at the top of the page are a Bootstrap button group, and we will write the JavaScript necessary to catch their click events, resort the address book by the respective property, and re-render the entries in the new sorted order, <em>all without ever leaving the web page</em>.</p>

                    <p>Let's build this up, step-by-step.</p>

                    <h3>Review Data File and Template</h3>

                    <p>Before we start coding, open the file 'employees.js' in your proejct's 'js' sub-folder so you can see what our data structure looks like.</p>

                    <pre><code>
var Employees = {
    entries: [
        {first: &#039;Jack&#039;, last: &#039;Donaghy&#039;, title: &#039;President&#039;, dept: &#039;Executive&#039;, pic: &#039;...url to picture...&#039;},
        {first: &#039;Liz&#039;, last: &#039;Lemon&#039;, title: &#039;Head Writer&#039;, dept: &#039;Production&#039;, pic: &#039;...url to picture...&#039;},
        ...more entries...
    ]
};
                    </code></pre>

                    <p>This script file creates one global object called <code>Employees</code>, which has one property called <code>entries</code>. This property contains an array of objects, each of which have the properties <code>first</code> (first name), <code>last</code> (last name), <code>title</code> (job title), <code>dept</code> (department), and <code>pic</code> (url to headshot). These are our address book entries.</p>

                    <p>Now open the index.html file in your project's root directory, and look at the <code>&lt;div class=&quot;template&quot;&gt;</code> element near the bottom of the file.</p>

                    <pre><code>
&lt;!-- template card for each entry
 this will not be displayed, only used by code --&gt;
&lt;div class=&quot;template person&quot;&gt;
    &lt;img class=&quot;pic&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;
    &lt;div class=&quot;details&quot;&gt;
        &lt;h2 class=&quot;name&quot;&gt;&lt;span class=&quot;first&quot;&gt;&lt;/span&gt; &lt;span class=&quot;last&quot;&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;p class=&quot;lead title&quot;&gt;&lt;/p&gt;
        &lt;p&gt;Department: &lt;span class=&quot;dept&quot;&gt;&lt;/span&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
                    </code></pre>

                    <p>Our stylesheet has a rule for <code>.template</code> that sets <code>display: none;</code>, so the reader won't be able to see this, but we will use it in our code. In essence, we will merge the objects in <code>Employees.entries</code> with this template to produce the individual entries. As we build each new entry, we will append them to the <code>&lt;div class=&quot;address-book&quot;&gt;</code> element, which will act as the container for all address book entries.</p>

                    <h3>Write a Function to Render the Entries</h3>

                    <p>Now open the file <strong>address-book.js</strong> in the 'js' sub-directory. This is where we will write our code. I've supplied one function for you already that will sort an array of objects (our address book entries) by any given proeprty. You now need to write another function in that same file called <code>render(entries)</code>, which takes one parameter representing an array of address book entry objects. This function will merge the objects in the passed <code>entries</code> array with the HTML in the <code>&lt;div class=&quot;template&quot;&gt;&lt;/div&gt;</code> element.</p> 

                    <p>The first thing this function should do is get a reference to the <code>&lt;div class=&quot;template&quot;&gt;&lt;/div&gt;</code> element, and the <code>&lt;div class=&quot;address-book&quot;&gt;&lt;/div&gt;</code> element. You'll need the former to <code>clone()</code>, and you'll <code>append()</code> the cloned template elements after you populate them to the latter. Use <a href="http://api.jquery.com/class-selector/">jQuery to select both of these elements by their class name</a>, and assign them to variables.</p>

                    <p>Since this <code>render()</code> function will be called whenever the reader chooses to resort the entries, the first thing we need to do in the body of this function is clear out any HTML that might already be in the <code>&lt;div class=&quot;address-book&quot;&gt;&lt;/div&gt;</code> element. Use jQuery's <code><a href="http://api.jquery.com/empty/">empty()</a></code> method to do that.</p>

                    <p>Next, for each object in the array passed in the <code>entries</code> parameter, we need to merge its properties with our template HTML. You can use a standard <a href="http://www.w3schools.com/js/js_loop_for.asp">JavaScript <code>for()</code> loop</a> to loop through each object in the array, or you can try jQuery's <code><a href="http://api.jquery.com/each/">$.each()</a></code> function if you prefer.</p>

                    <p>Inside your loop, you'll first want to use jQuery's <code><a href="http://api.jquery.com/clone/">clone()</a></code> method to clone the template element tree into a new element tree that you will populate. Assign the return value of <code>clone()</code> to a variable so you can work with the cloned elements.</p>

                    <p>The template HTML looks like this:</p>

                    <pre><code>
&lt;div class=&quot;template person&quot;&gt;
    &lt;img class=&quot;pic&quot; src=&quot;&quot; alt=&quot;&quot;/&gt;
    &lt;div class=&quot;details&quot;&gt;
        &lt;h2 class=&quot;name&quot;&gt;&lt;span class=&quot;first&quot;&gt;&lt;/span&gt; &lt;span class=&quot;last&quot;&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;p class=&quot;lead title&quot;&gt;&lt;/p&gt;
        &lt;p&gt;Department: &lt;span class=&quot;dept&quot;&gt;&lt;/span&gt;&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
                    </code></pre>

                    <p>You'll notice that for each property defined in an address book entry, there is a corresponding HTML element with a matching <code>class</code> name. For example, each address book entry has a <code>first</code> and <code>last</code> property, which correspond to the <code>&lt;span class=&quot;first&quot;&gt;&lt;/span&gt;</code> and <code>&lt;span class=&quot;last&quot;&gt;&lt;/span&gt;</code> element in the <code>&lt;h2&gt;</code> element. This will allow us to find and populate the HTML elements that correspond to our address book entry objects.</p>

                    <p>Use jQuery's <code><a href="http://api.jquery.com/find/">find()</a></code> method to find a descendant element of your cloned template with a class name that matches each of the properties in the entry objects: <code>first</code>, <code>last</code>, <code>title</code>, <code>dept</code>, and <code>pic</code>. For all properties except <code>pic</code>, use jQuery's <code><a href="http://api.jquery.com/html/">html()</a></code> method to populate the contents of the element. For the <code>pic</code> property, use jQuery's <code><a href="http://api.jquery.com/attr/">attr()</a></code> method to set the <code>src</code> attribute of the <code>&lt;img&gt;</code> element to the value of the <code>pic</code> property.</p>

                    <p>After you've populated the cloned template elements, remove the 'template' class from the cloned template element using jQuery's <code><a href="http://api.jquery.com/removeClass/">removeClass()</a></code> method. This will make the new entry visible on the page.</p>

                    <p>Finally, use jQuery's <code><a href="http://api.jquery.com/append/">append()</a></code> method to append the populated elements to the <code>&lt;div class=&quot;address-book&quot;&gt;&lt;/div&gt;</code> element you selected earlier and stored in a variable.</p>

                    <h3>Sort and Render the Entries on Load</h3>

                    <p>Now that you have a function to sort the entries, and another function to render them, you next need to write the code to sort the entries by last name and renders them when the page is fully loaded and ready for manipulation. The jQuery library has a <a href="http://api.jquery.com/jQuery/#jQuery3">handy mechanism for registering a function to be called after the page is loaded</a>, so use that to call a new function that in turn calls the supplied <code>sortObjArray()</code> function passing 'last' as the property to sort upon, and then your <code>render()</code> function to render the entries.</p>

                    <p>If you've done everything correctly, you should be able to open the index.html page in your browser and see the various entries listed, sorted by last name.</p>

                    <h3>Add Event Handlers for Sort Buttons</h3>

                    <p>The last thing we need to do is respond appropriately when a reader clicks the &quot;Sort By:&quot; buttons at the top of the page. To do that, we need to register a click event handler for all the buttons, and within that function, resort by the appropriate property and re-render the entries.</p>

                    <p>First let's take a look at the sorting user interface (UI) markup:</p>

                    <pre><code>
&lt;!-- sorting UI --&gt;
&lt;div class=&quot;sort-ui&quot;&gt;
    &lt;span class=&quot;sort-label&quot;&gt;Sort By: &lt;/span&gt;
    &lt;div class=&quot;btn-group&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default active&quot; data-sortby=&quot;last&quot;&gt;Name&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-sortby=&quot;title&quot;&gt;Title&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-sortby=&quot;dept&quot;&gt;Department&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;
                    </code></pre>

                    <p>Note that the <code>&lt;div&gt;</code> surrounding the button group has the class 'sort-ui', and the individual buttons have a style class of 'btn' amongst others. Use jQuery to <a href="http://api.jquery.com/descendant-selector/">select all the elements matching the descendant selector 'sort-ui btn'</a>, and <a href="http://api.jquery.com/click/">register a single click event handler function</a> for all of them at once.</p>

                    <p>In that click handler function, we need to know which property to sort upon, which is why I included an extra <code>data-sortby</code> attribute on each of the buttons. In our event handler, the <code>this</code> variable will be a refence to the button element that was clicked, so you can get access to this attribute value and use it to sort the entries by the appropriate column.</p>

                    <p>The easiest way to do that is to wrap the button element as a jQuery obect, and use the jQuery <code><a href="http://api.jquery.com/attr/">attr()</a></code> method. To wrap the element as a jQuery object, use the code <code>var sortBtn = $(this);</code>. You can then call <code>sortBtn.attr('data-sortby');</code> to get the data-sortby attribute value.</p>

                    <p>Once you know which column to sort by, you just need to call the supplied <code>sortObjArray()</code> function to re-sort the array, and your <code>render()</code> method to re-render the entries in the new sorted order.</p>

                    <p>The final step is to adjust the style classes on the buttons so that you visually indicate to the user which button is currently selected. The style class that achieves this effect is 'active', so we need to remove that style class from whichever button had it before, and add it to the button that was clicked.</p>

                    <p>We should first remove the 'active' class from whichever button had it before. To do this, we need to get a reference to that button. Thankfully, it has a style class we can use to easily locate it: 'active'. That button is a sibling element of the button that was clicked (i.e., it has a same parent element), so use jQuery's <code><a href="http://api.jquery.com/siblings/">siblings()</a></code> method to find a sibling of the clicked button that currently has the 'active' style class. You can then use jQuery's <code><a href="http://api.jquery.com/removeClass/">removeClass()</a></code> method to remove the style class.</p>

                    <p>Adding the 'active' style class to the clicked button is relatively easy: just use jQuery's <code><a href="http://api.jquery.com/addClass/">addClass()</a></code> method on the clicked button.</p>

                </section>


                <section id="optional-steps">
                    <h2>Optional Steps</h2>
                </section>

                <p>If you get done early, or just want the extra challenge, try some of these optional steps.</p>

                <h3>Add a Fade-In Effect</h3>

                <p>The jQuery library provides a framework for animation effects, similar to the transitions and transforms we learned in CSS. In this optional step, we'll make the address book entries fade in after we have added them to the page.</p>

                <p>In order to make something fade in, it first must be hidden. So at the start of your <code>render()</code> function, just before you use the <code>empty()</code> method on the address book element to clear it out, use the jQuery <code><a href="http://api.jquery.com/hide/">hide()</a></code> method to hide the entire address book element.</p>

                <p>Now at the very end of your <code>render()</code> method, after you have added all the address book entries, and just before you exit the function, use the jQuery <code><a href="http://api.jquery.com/fadeIn/">fadeIn()</a></code> method to make the populated address book slowly fade in rather than just appear suddenly.</p>

                <p>The <code>fadeIn()</code> method accepts an optional settings object, which can use to control the speed and easing of the effect.</p>


            

            </article>

        </div> <!-- .container -->
    </body>
</html>