<!doctype html>
<html>
    <head>
        <!--#include virtual="../inc/common-head.html" -->

        <meta name="description" content="INFO 343 Forms and jQuery Lab">
        <title>Lab 6: Sign-Up Form</title>
    </head>
    <body>
        <div class="container">

            <!--#include virtual="../inc/crumbtrail.html" -->

            <article class="lab">

                <section id="intro">
                    <div class="page-header lab-title">
                        <h1>Lab 6: Sign-Up Form</h1>
                        <p class="lead">Forms and jQuery</p>
                    </div>

                    <p>In class this week, we learned how to construct HTML forms to gather information from the reader, and manipualte those forms using JavaScript and jQuery. In this lab, we will practice those skills by building a typical sign-up form that gathers contact detials from the reader.</p>

                    <h2>General Instructions</h2>
                    <ol>
                        <li>If you get stuck at any point, search the Internet, ask your neighbor, or ask the TA for help.</li>

                        <li>At the end of the lab, submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288924">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299191">Section B</a>).</li>

                        <li>If you don't finish all the required tasks during our lab time, finish them over the weekend and submit your published site URL before 8:00am on Monday morning.</li>

                        <li>If you finish all the required steps, go on and try some of the <a href="#optional-steps">optional ones</a>. Remember that you have to do at least one of the optional steps in order to get 10/10 on the Completeness portion of your grade. If you do only the required steps, you'll get 9/10 on that portion.</li>
                    </ol>

                    <h2>Required Steps</h2>
                    <ol>
                        <li><a href="#fork">Fork my lab6 repository and clone to your lab machine</a></li>

                        <li><a href="#code">Write the JavaScript for the Form</a></li>

                        <li><a href="#github">Stage, Commit, and Push to GitHub</a></li>

                        <li><a href="#submit">Publish your site to your web hosting server and submit the site URL via Canvas</a></li>
                    </ol>
                </section>

                <section id="fork">
                    <h2>Fork and Clone</h2>

                    <p>First, go to <a href="https://github.com" target="_blank">GitHub</a> and sign into your account.</p>

                    <p>Next, go to my <a href="https://github.com/drstearns/lab6" target="_blank">lab5 repository on GitHub</a>, and fork it. You did this in our previous lab, but in case you forgot how to do so, click the "Fork" button at the top-right of the page and follow any instructions you receive. This will create a copy of this repository in your own account so that you have something to start with. The repository contains the various images and file stubs you'll need.</p>

                    <p>Once you've forked the repository, clone it to your local lab machine using SourceTree. We've done this a few times now, but if you've forgotten how, follow these steps:</p>

                    <ol>
                        <li>In <strong>your forked lab6 repository</strong> (not my original one) on the GitHub site, copy the 'HTTPS Clone URL' on the right side of the screen</li>
                        <li>Run the SourceTree app</li>
                        <li>Click on the Clone/New button in the upper-left of the screen</li>
                        <li>Enter the GitHub HTTPS clone URL you copied into the Source URL box</li>
                        <li>Hit tab, and SourceTree will automatically populate the Destination Path for you (usually a new folder named after your repository in the My Documents folder)</li>
                        <li>Click the 'Clone' button to clone the GitHub repository to your local machine</li>
                        <li>If you get stuck, as your TA or a neighbor for help</li>
                    </ol>
                </section>

                <section id="code">
                    <h2>Write the JavaScript</h2>

                    <p>Before you begin writing the JavaScript for the form, let's first take a look at the form itself. Open the 'index.html' file in the project root directory in your browser to see what it looks like. I've written the form markup for you, and have used Bootstrap's responsive style classes to lay it out. This is what the form should look like on a large monitor:</p>

                    <p><img src="img/signup-wide.png" alt="Wide version of signup form screen shot" class="screen-shot img-responsive"></p>

                    <p>And this is what it should look like on screens less than 768px:</p>

                    <p><img src="img/signup-narrow.png" alt="Narrow version of signup form screen shot" class="screen-shot img-responsive"></p>

                    <p>Notice how Bootstrap automatically re-lays out the form so that it fits properly on a small screen. Fields that were sitting side-by-side are now stacked, and the labels are moved to be on top of the inputs rather than on the left side.</p>

                    <p>Our goal in this lab is to write JavaScript to accomplish the following things:</p>
                    <ul>
                        <li>Load the State <code>&lt;select&gt;</code> with the full list of US states and territories (data provided)</li>
                        <li>Validate the form fields before they get submitted to the server</li>
                        <li>Redirect the browser to another page when the reader clicks the "No Thanks!" button</li>
                    </ul>

                    <p class="alert alert-info">These will be our required steps, but if you get done early, or want the extra challange, see the <a href="#optional-steps">optional steps</a> below for other things you can add to this form.</p>

                    <h3>Create a Document Ready Function</h3>

                    <p>Start your text editor, and open the file 'js/sign-up.js'. This is where we will write or JavaScript for this lab.</p>

                    <p>Whenever you want to write code that will manipulate elements on the page, you should always wait until the document is actually ready for manipulation. The browser will raise an event when the document is ready, and the jQuery library makes it easy to <a href="http://learn.jquery.com/using-jquery-core/document-ready/">supply a function that should be called when that event is raised</a>. We call this function the "document ready function." The verbose way of doing this looks like so:</p>

                    <pre><code>
//onDocReady
//called when the document is ready for manipulation
function onDocReady() {
    //document is now ready for manipulation
    
} //onDocReady()

//tell jQuery to call the onDocReady function when 
//the document ready event is raised
jQuery(document).ready(onDocReady);
                    </code></pre>

                    <p>But you can instead use jQuery's more terse form for this, which looks like so:</p>

<pre><code>
//function that will be called when the 
//document is ready for manipulation
$(function(){
    //document is now ready for manipulation

}); //on document ready 
</code></pre>

                    <p>Whichever form you use, add your code just after the <code>//document is now ready for manipulation</code> comment.</p>

                    <h3>Load the State Drop-Down</h3>

                    <p>The HTML page contains only one <code>&lt;option&gt;</code> element in the state <code>&lt;select&gt;</code>, which says "select a state..." I've provided a JavaScript file in the 'js' sub-directory called 'us-states.js', which defines a global variable named <code>usStates</code>, which is an array of objects, one for each US state and territory. Each object has a <code>name</code> property, which is the state's full name, and an <code>abbreviation</code> property, which is the state's abbreviation. We will now write the code to dynamically add an <code>&lt;option&gt;</code> element for each of those US states and terrtiroies. We did this in class on Tuesday, so this should be somewhat familiar.</p>

                    <p>The general algorithm is to loop over the <code>usStates</code> array, creating a new <code>&lt;option&gt;</code> element for each state, and adding that new <code>&lt;option&gt;</code> element to our state <code>&lt;select&gt;</code>.</p>

                    <p>First, get a reference to the state <code>&lt;seleect&gt;</code> using the jQuery function (<code>$(...);</code>), and assign it to a variable. The basic syntax is:</p>

                    <pre><code>
var stateSelect = $(&#039;...appropriate css selector here...&#039;);
                    </code></pre>

                    <p>The state select already has a class name on it of 'us-states', so use the appropriate class selector sting, just like you would use if you were trying to apply style properties to that class.</p>

                    <p>Once you have selected the state drop-down into a variable, you next need to loop over the <code>usStates</code> array. You can either use the standard JavaScript <code>for (...)</code> loop, or the jQuery <code><a href="http://api.jquery.com/jQuery.each/">$.each()</a></code> utility function. The standard for loop would look like this:</p>

     
                    <pre><code>
var idx;
var state;
for (idx = 0; idx &lt; usStates.length; ++idx) {
    state = usStates[idx];
    //code to create new option element, populate, and append
}
                    </code></pre>

                    <p>Whichever looping technique you choose, inside your loop you should create a new <code>&lt;option&gt;</code> element, set its <code>value</code> attribute to the state abbreviation, and set its HTML to the state name. Then <a href="http://api.jquery.com/append/">append</a> the new <code>&lt;option&gt;</code> element to the state <code>&lt;select&gt;</code> element.</p>

                    <p>We did this in class, but if you're having troubles remembering how we did it, <a href="https://github.com/drstearns/in-class-code-b/blob/master/forms/js/forms-demo.js">review the code we wrote</a>.</p>

                    <h3>Add Validation to the Form Fields</h3>

                    <p>Next, we need to add some validation to our form fields so that we can help the user supply valid information. Our validation rules are as follows:</p>

                    <ul>
                        <li>The following fields are required: first-name, last-name, and email</li>
                        <li>If the user has entered a value in the addr-1 field, the user must also enter something into the zip field</li>
                    </ul>

                    <p>The first rule can be accomplished by simply adding a <code>required</code> attribute to the first-name, last-name, and email <code>&lt;input&gt;</code> elements. Do that now.</p>

                    <p class="alert alert-info">Since Safari and IE 9 and earlier don't actually support the <code>required</code> property, I've added an optional step you can do where you write some JavaScript to validate that these fields have values. If you want to do this optional step, <a href="#js-validate">see the description below</a>. If you don't want to do this optional step, just add the <code>required</code> attribute to the elements.</p>

                    <p>The second rule requires some JavaScript to catch the form's submit event, and examine the fields. Let's add that now.</p>

                    <p>In your document ready function, use jQuery to select our sign up form, and give it a function to call when the submit event on that form is raised. Our form has a style class on it called 'signup-form', which should make it rather easy to select into a jQuery object. You then need to pass a function to the <code>submit()</code> of that jQuery object. The syntax would look like this:</p>

                    <pre id="form-submit-handler"><code>
$(&#039;.signup-form&#039;).submit(function(){
    //code to execute when the sign-up form is submitted
    //this is the raw DOM form element
    //wrap it in a jQuery object so we can use jQuery methods on it
    var signupForm = $(this);

});
                    </code></pre>

                    <p>In this function, you need to enforce the rule that if the addr-1 field has a value, the zip field must also have a value (but if the user has not entered anything into the addr-1 field, the zip may remain blank as well). To do this, you first need to get a reference to the addr-1 input element so you can test to see if it has a value. The <code>signupForm</code> variable in the above code snippet is a jQuery object, so that means you can use its <code>find()</code> method to find the <code>&lt;input name="addr-1"&gt;</code> element inside the sign-up form. The syntax for that would look like this:</p>

                    <pre><code>
    //select a descendant input element with the name &quot;addr-1&quot;
    var addr1Input = signupForm.find(&#039;input[name=&quot;addr-1&quot;]&#039;);
    var addr1Value = addrInput.val();
                    </code></pre>

                    <p>The addr1Value variable will contain the current value of the addr-1 input, and that will be a string containing whatever was typed into the field. If nothing has been typed into the field, it will be an empty string (length == 0).</p>

                    <p>After you've gotten the value, test to see if its length > 0. If it is, you then need to get a reference to the <code>&lt;input name="zip"&gt;</code> element, and test whether it also has a value or not. If not, you should alert the user that a zip must be provided if an address is provided, and return false from the function to prohibit the form submission.</p>

                    <p>Use the same <code>signupForm.find()</code> method to find the <code>&lt;input name="zip"&gt;</code> element, and use the same <code>val()</code> function to get its value.</p>

                    <p>To alert the user, use the the global function <code>alert('...message to display....');</code>.</p>

                    <h3>Handle the "No Thanks!" Button</h3>

                    <p>Finally, we need to tell jQuery to call a function when the user clicks the "No Thanks!" button, and that function should redirect the browser back to some kind of home page. Since we building just one page and not the entire site, we will use http://www.google.com as our home page.</p>

                    <p>In your document ready function, use jQuery to select the "No Thanks!" button, and provide a function to call when the user clicks that button. That button has a style class name of 'cancel-signup', so it's easily selectable using a class selector. We've done this several times in class, and you did it in your last lab, but if you've forgotten the syntax, it looks like this:</p>

                    <pre><code>
$(&#039;.cancel-signup&#039;).click(function(){
    //code to run when user clicks &quot;No Thanks!&quot; button
    
}); //cancel-signup click
                    </code></pre>

                    <p>In this click handler function we want to redirect the browser to 'http://www.google.com'. That is easily done by setting the <code>window.location</code> property to a string containing this URL.</p>
                    
                </section>

                <section id="github">
                    <h2>Stage, Commit, and Push to GitHub</h2>

                    <!--#include virtual="../inc/commit.html" -->
                </section>

                <section id="submit">
                    <h2>Publish Site and Submit URL via Canvas</h2>

                    <!--#include virtual="../inc/publish.html" -->

                    <p>After you've published your site and verified that it's working, <strong>submit your published site URL via the Canvas assignment for this lab (<a href="https://canvas.uw.edu/courses/849701/assignments/2288924">Section A</a> &diams; <a href="https://canvas.uw.edu/courses/873608/assignments/2299191">Section B</a>)</strong>.</p>
                </section>

                <section id="optional-steps">
                    <h2>Optional Steps</h2>

                    <p>If you get done early, or just want the extra challenge, try some of these optional steps.</p>

                    <h3>Show a Confirmation Modal Before Abandoning Signup</h3>

                    <p>In the required steps, we implemented a click handler for the "No Thanks!" button that immediate takes the user to the Google home page. This is of course a bit jarring, and could result in the loss of work, so we really should confirm that the user really wants to leave the page before actually doing so. Our modal dialog will look like this:</p>

                    <p><img src="img/modal.png" alt="Screen shot of modal confirmation dialog" class="img-responsive screen-shot"></p>

                    <p>Modern CSS frameworks like Bootstrap offer the ability to display a <code>&lt;div&gt;</code> of content as if it was a modal dialog box, and that <code>&lt;div&gt;</code> may contain any kind of HTML markup, and any sort of buttons you want to define. So instead of just sending the user to Google when he or she clicks the "No Thanks!" button, let's show the user a confirmation modal dialog and ask if he or she really wants to leave the page.</p>

                    <p>I've already added the necessary markup to the page for you, as defined by Bootstrap. It's in the <code>&lt;div class="modal fade cancel-signup-modal"&gt;</code> element at the bottom of the page. Here is what it looks like:</p>

                    <pre><code>
&lt;div class=&quot;modal fade cancel-signup-modal&quot;&gt;
    &lt;div class=&quot;modal-dialog&quot;&gt;
        &lt;div class=&quot;modal-content&quot;&gt;
            &lt;div class=&quot;modal-header&quot;&gt;
                &lt;h4 class=&quot;modal-title&quot;&gt;Abandon Signup?&lt;/h4&gt;
            &lt;/div&gt;
            &lt;div class=&quot;modal-body&quot;&gt;
                &lt;p&gt;Are you sure you don&#039;t want to signup to receive useless marketing spam for the rest of your life? I mean, this is a rare opportunity here. You&#039;d be a fool not to sign up!&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class=&quot;modal-footer&quot;&gt;
                &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;No, Go Back to Signup Form&lt;/button&gt;
                &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-abandon&quot;&gt;Yes, Get Me Out of Here!&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;&lt;!-- /.modal-content --&gt;
    &lt;/div&gt;&lt;!-- /.modal-dialog --&gt;
&lt;/div&gt;&lt;!-- /.modal --&gt;
                    </code></pre>

                    <p>This is a lot of markup, but it breaks down into a few logical sections. The outter-most <code>&lt;div&gt;</code> contains the entire modal dialog, and thus has the Bootstrap class name "modal". This div contains another div with the class name 'modal-dialog', and that in turn contains another div with the class name 'modal-content'. This modal content section is then divided into three main sections: the header, the body, and the footer. The header contains a title for the dialog; the body contains the main body message; and the footer contains a row of buttons.</p>

                    <p>This markup will not be visible to the user until you call a Bootstrap JavaScript method to display it. This requires just one line of code, which you want to put inside the click event handler function you already wrote for the "No Thanks!" button:</p>

                    <pre><code>
$(&#039;.cancel-signup&#039;).click(function(){
    //code to run when user clicks &quot;No Thanks!&quot; button
    //show the modal confirmation dialog
    //and don&#039;t reset window.location until the user clicks
    //the &quot;Yes, Get Me Out of Here!&quot; button
    $(&#039;.cancel-signup-modal&#039;).modal();
}); //cancel-signup click
                    </code></pre>

                    <p>You should recognize the first part of the line: it uses the jQuery function to select the overall modal div, and it then calls the <code>modal()</code> method on the resulting jQuery object. That <code>modal()</code> method is actually provided by Bootstrap&mdash;their JavaScript file adds a few methods to the jQuery object to manipulate their user interface widgets. Thus is the magic of JavaScript: any JavaScript code can add methods to any object defined by another library!</p>

                    <p>To finish this, we just need to catch the click event raised by the "Yes, Get Me Out of Here!" button in our modal dialog. This is just like catching the click of any other button, and I've already added a handy style class name to the button of 'btn-abandon' so it should be very easy to select using jQuery. The syntax would look like this, and you should add this at the end of your document ready function:</p>

                    <pre><code>
//add this at the end of your document ready function
$(&#039;.btn-abandon&#039;).click(function(){
    window.location = &#039;http://www.google.com&#039;;
});
                    </code></pre>

                    <h3>Hide and Show the "Other" Input Based on Selection</h3>

                    <p>One of the fields in the form is the "How did you hear about us?" drop-down. Next to that field is another input that can be used to specify a value if the user chooses the "Other" option. As the page exists, that input is always visible and enabled, even if the user has chosen something in the drop-down list besides "Other". In this step, we'll make the user experience better by hiding and disabling that extra input until the user actually selects "Other" in the drop-down list.</p>

                    <p>Our first step is to make this input disabled and hidden by default. The first part of that is easy: simply add a <code>disabled</code> attribute to the <code>&lt;input name="refer-other"&gt;</code> element so that it will be disabled by default (disabled fields are not posted to the server). The second part of that can be done by adding a CSS style rule that applies to that element, and sets its <code>display</code> property to 'none'. In the 'css/styles.css' file, add the following style rule:</p>

                    <pre><code>
input[name=&quot;refer-other&quot;] {
    display: none;
}
                    </code></pre>

                    <p>The selector for this style rule reads as "apply these style properties to any <code>&lt;input&gt;</code> element that has a property called 'name' that is equal to the value 'refer-other'." That will match our <code>&lt;input name="refer-other"&gt;</code> element, and set its <code>display</code> property to 'none', making it hidden by default.</p>

                    <p>Next, we need to ask jQuery to call a function every time the value of the <code>&lt;select name="refer"&gt;</code> changes. This is done similarly to how we've asked jQuery to call a function when some element is clicked: we first select the element using the jQuery function, and then pass a function to the relevant method (in this case, <code>change()</code>). The code, which should be added to your document ready function, should look like this:</p>

                    <pre><code>
$(&#039;select[name=&quot;refer&quot;]&#039;).change(function(){
    //get a ref to the refer select
    //add the refer-other input
    var referSelect = $(this);
    var otherInput = $(&#039;[name=&quot;refer-other&quot;]&#039;);

    //if the refer select&#039;s value in lower case is equal to &quot;other&quot;...
    if (&#039;other&#039; === referSelect.val().toLowerCase()) {
        //remove the disabled attribute from the
        //refer-other input, show it, and set focus to it
        otherInput.removeAttr(&#039;disabled&#039;);
        otherInput.show();
        otherInput.focus()
    }
    else {
        //otherwise, make the refer-other input disabled
        //and hide it
        otherInput.attr(&#039;disabled&#039;, true);
        otherInput.hide();
    }
}); //refer change function
                    </code></pre>


                    <h3 id="js-validate">Validate Required Fields in JavaScript</h3>

                    <p>In the required steps, you added the <code>required</code> attribute to a few fields that we wanted to make required: first-name, last-name, and email. These attributes work great in current versions of Chrome, Firefox, and IE, but they don't work in Safari or older versions of IE (version 9 and earlier). So to make sure that these fields are really required, we can add some more JavaScript to our <a href="#form-submit-handler">form submit event handler function</a>. This code will select each of these fields and verify that the field actually has a value.</p>

                    <p>In your existing <a href="#form-submit-handler">form submit event handler function</a>, add code to find these three fields, and test their values. The syntax for finding the field and getting its value looks like this:</p>

                    <pre><code>
    var reqField;       //reference to a required field
    var reqValue;       //the required field&#039;s value

    //find the input with name=&quot;first-name&quot; and get its trimmed value
    reqField = signupForm.find(&#039;input[name=&quot;first-name&quot;]&#039;);
    reqValue = reqField.val().trim();
    if (0 === reqValue.length) {
        //field has no value
        alert(&#039;You must enter a first name!&#039;);
        return false;
    }
                    </code></pre>

                    <p>Repeat this code fragment to test the 'last-name' and 'email' fields in the same way.</p>
            
                </section>

            </article>

        </div> <!-- .container -->
    </body>
</html>