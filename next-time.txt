Notes for Next Time
------------------------

In general, consider Bob Boiko's idea of creating multiple paths through this class, with ways to demonstrate mastery that cause a student to "level up." Final 4.0 grade based on how high a level the student reaches. Possible paths:
- Designer (focus on HTML/CSS and page design)
- Developer (focus on interactivity and JavaScript)
- Information Architect (focus on navigation, info categorization, etc)


Things to add or restructure:
- Need to have a short unit on URLs and paths, or require that they read a note on it. Apparently they don't learn anything about file paths in CSE 142. 


First Day:
- On the first day, do overview of HTML and get them writing HTML pages after course intro. Save How the Web Works lecture for later. Or just explain what a "web server" is.
- During course intro, stress that you don't require any pre-existing knowledge of web dev, but if you've never written an HTML page before, you need to read what is assigned, and probably do some more reading on your own. Give them titles of step-by-step books.

First Lab:
- If the quarter starts mid-week again, just teach a normal class on that first Friday, and teach the VCS tools.
- If you do the lab, give them a pre-done page and image to manage in the tools. Have them make minor edits to the page, but don't have them to write it from scratch. Also consider just dispensing with FileZilla and teach them how to deploy with ssh and git clone/pull. Much simpler. Also have your TA do an edit while you're talking so you can show merging.

Basic HTML Lecture:
- Instead of a self-directed in-class challenge on choosing the right semantics tags, consider doing it interactively with them, and make them decide as a group which tags should be used for which kinds of constructs.
- Also make sure you cover block vs inline distinction, even though that can be changed in CSS.

Basic CSS lecture:
- "Code with me" style worked really, really well. Do the HTML part this way next time as well. Covered a lot so maybe think hard about how to split this into the two different lectures.
- Consider mixing CSS and HTML in these two lectures. Students started to have a lot more fun when we changed fonts, colors, etc.

Advanced HTML/CSS week:
- Code with me worked really well--keep doing that. But think through what you really should cover in "basic" vs "advanced" HTML/CSS. Perhaps introduce page layout a little earlier?
- Don't worry about microdata at this point--seems pretty esoteric.

JavaScript
- Teach them the raw DOM and only teach jQuery as an option they might want to use (like Boostrap for CSS)
- Spend a lot more time explaining the JavaScript language, especially literal object and array notation, iterating arrays and object properties

HTML 5 Scripting
- Should we cover local storage? Maybe not. If we do, avoid using Modernizr since their property name doesn't match the actual DOM object name.

