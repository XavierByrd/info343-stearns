@import url(reset.css);

body {
    padding: 20px;
    font-family: 'Helvetica', sans-serif;
    font-size: 16px;
}

h1 {
    font-size: 200%;
    font-weight: bold;
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}

h2 {
    font-size: 150%;
    font-weight: bold;
    margin-top: 0.5em;
    margin-bottom: 0.5em;
}

p {
    margin-bottom: 1em;
}

code {
    font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
    padding: 2px 4px;
    font-size: 90%;
    color: #c7254e;
    white-space: nowrap;
    background-color: #f9f2f4;
    border-radius: 4px;
}


/* this is critical
tells browser to include padding and border in box size 
that way, you can set your column widths as percentages
and then adjust padding however you'd like
note the use of the -moz- prefix for Firefox (still required)
*/
.grid, .row, .col {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.grid {
    /* uncomment to draw a border around the entire grid */
    /*border: 1px dotted #CCC;*/
}

/* set the row width to whatever you want */
.row {
    width: 100%;
}

/* we're doing a 3-column layout
so set each column width to 33% */
.col {
    width: 33%;
    padding: 10px;

    /* uncomment this to draw a border around each column */
    /*border: 1px dotted #CCC;*/

    /* or uncomment to draw a background color */
    /*background-color: #F9F9F9;*/
}

/* the float approach floats each column to the left
and does a clear on the row so that the next row
appears under the previous */ 
.grid-float .col {
    float: left;
}

.grid-float .row {
    clear: both;
}

/* this rule is an advanced technique called a "micro-clear that you can
use if you want to shade or draw a border around the whole row or grid
when using the float technique. because all columns are floated
the containing row and grid do not expand to surround the 
floated columns. using the :after pseudo-selector, we can
inject a single space at the end of each row and tell the browser
to display it as a table 
if you don't want to shade or draw a border around rows or the whole
grid, then you don't need this rule */
.grid-float .row:after {
    content: " ";
    display: table;
    clear: both;
}

/* inline-block approach sets display to inline-block
vertical-align actually controls vertical alignment 
in this case, so set it to top */
.grid-iblock .col {
    display: inline-block;
    vertical-align: top;
}


/* the table approach uses the table-
display settings to mimic the way HTML tables layout
without using the actual HTML table, tr, and td
elements, which would not be semantically correct */

/* these first two rules don't seem to be necessary 
in current versions of Chrome and Firefox */ 
.grid-table {
    display: table;
}

.grid-table .row {
    display: table-row;
}

/* this is the critical setting */ 
.grid-table .col {
    display: table-cell;
}
