<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Homework assignments for INFO 343">
    <meta name="author" content="David Stearns">

    <title>INFO 343 Homework</title>

    <link rel="stylesheet" href="../lib/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/homework.css">
    <link rel="stylesheet" href="../css/footer.css">

    <link rel="shortcut icon" href="../img/shortcut.png">

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="../lib/html5shiv/html5shiv.js"></script>
      <script src="../lib/respond/respond.min.js"></script>
    <![endif]-->

    </head>
    <body>

        <div class="container">
            <nav>
              <ol class="breadcrumb">
                <li><a href="../..">INFO 343</a></li>
                <li><a href="..">Sections A &amp; B</a></li>
                <li>Homework Assignments</li>
              </ol>
            </nav>

            <article>
                <div class="page-header homework-title">
                    <h1>Homework Assignments</h1>
                    <p class="lead">Requirements and supporting materials</p>
                </div>

                <p>The goal of our homework assignments is to make you work through a realistic web development project so that you'll be prepared to do this kind of work in a real job (and get paid for it!). In a real project, you often won't have very explicit instructions about what to build or what it should look like; instead, customers typically tell you what they want in vague terms, and it's up to you to ask questions, interpret those requirements, and build something that looks and feels professional. So that's the kind of thing we'll practice in these assignments. This lack of explicit instructions may make you feel nervous at first, but working in this manner is an important skill to learn.</p>

                <p>A very common type of web development project is building a web site for a small business, so that's what I'm going to ask you to do....</p>

                <p>Congratulations! You've just been hired by the hottest new pizzeria, <strong>Dawg Pizza</strong>, to build their web site. You will be working with the owner and founder, Tony Pizzarelli, to build a site that both he and his target customers will love.</p>

                <p>You will build this site in four phases, adding complexity and features each time. We will assign these phases the version numbers 1.0, 2.0, 3.0, and 4.0. The requirements and due-dates for each version are listed below, and you'll submit your completed versions via the respective <a href="https://canvas.uw.edu/courses">Canvas assignment</a>.</p>

                <p>For each of these versions, Tony will supply you with his list of must-have and optional requirements, plus some images and text copy you should include in the pages. If you want to ask clarifying questions, post them to our <a href="https://canvas.uw.edu/courses">"Questions for Pizzeria Owner" discussion board in Canvas</a>. The design of the pages will be up to you, however, so be creative and design something that both the owner and his target customers will find engaging, intuitive, and accessible. There is no one right way to build these sites, but we will examine your source to make sure you've used the appropriate HTML, CSS and JavaScript constructs for your particular solutions.</p>

                <p class="alert alert-warning">In order to get a full 10 points for the "completeness" portion of your grade, you must meet all the "must-have" requirements and at least one of the optional requirements. If you only do the must-have requirements, you'll get only 9 points on that portion of your grade. See the rubric displayed below each homework assignment in Canvas.</p>

                <p>When you complete a version of your site, publish it to a new folder on your student web server and submit the URL via the Canvas assignment. If you don't link to the new folder from anywhere, it will remain an "island" on the web and no one else besides your instructor and TA will be able to find it. If you want to publish a link to the folder on the Internet, feel free to do so, but you don't have to.</p>

                <p>Although you are not explicitly required to use a version control system while developing the various versions of this site, I would strongly recommend that you do so. A version control system like Git/GitHub will not only help you manage changes and recover from serious mistakes, but also keep your code backed-up in an offsite location in case your computer is lost, stolen, or broken. This is also a great opportunity to practice using these tools so that you are ready to jump into a professional web development team.</p>

                <p class="alert alert-danger">I want to stress that these are <strong>individual</strong> homework assignments, and this should be entirely your own work. Do not work on these sites together, and do not simply copy someone else's solution. You may use open-source CSS frameworks and JavaScript libraries developed by others, and you may search the Internet to learn how to do something, but <strong>your own code must be your own code</strong>. If you get stuck on a technical question, you may ask for help on our "Technical Help" Canvas discussion board, but don't expect anyone to reply after 5:00pm, or on weekends.</p>

                <div class="page-header">
                    <h2>Version 1.0 <small>Due by Oct 10</small></h2>
                </div>

                <p>Tony is working hard to get his pizzeria ready for their grand opening on October 8<sup>th</sup>, and he wants some kind of web presence by then. Below are his specific instructions. Remember that he isn't a web developer, so you'll need to interpret what he says and use the appropriate markup and styles. Fonts, color choices, and page layout are entirely up to you unless otherwise stated. You can also include additional images, background textures, or icons wherever you think they'd be helpful.</p>

                <p>If you need design inspiration, check out some <a target="_blank" href="https://www.google.com/search?q=pizzeria">other pizzeria web sites</a> and see what they did. Locally, <a href="http://www.pagliacci.com/">Pagliacci</a> has a very nice site, as does <a href="http://ballardpizzacompany.com/">The Ballard Pizza Company</a>. Copying bits of designs you like from other sites is a time-honored tradition in the web-development world, but if you do that, make it your own in some way.</p>

                <p>Here is the message from Tony:</p>

                <blockquote>
                    <p>Hey there! I'm excited that you're going to build my site. We're set to open on October 8<sup>th</sup>, and I'd like to have something up on the web by then. I know that doesn't give you much time, so for this first version, let's keep it kind of simple.</p>

                    <p>Since you're the expert on this stuff, I'll leave the page design to you. Make it look as cool as you can. My target customers are university students like you, so put together something that would make you want to order pizza from us!</p>

                    <p>Here are my must-haves:</p>
                    <ul>
                        <li>There should be three pages: Home, Menu, and About Us.</li>
                        <li>All pages should have the same set of navigation links to get from one page to the other.</li>
                        <li>All pages need to include a small version of <a target="_blank" href="img/logo.png">our logo</a>, and clicking on it should take you back to the home page.</li>
                        <li>The home page should have this on it:
                            <ul>
                                <li>The name of our restaurant (Dawg Pizza) prominently displayed</li>
                                <li>This short description: "Awesome wood-fired pizza with fresh ingredients baked to order. Come in and eat, or call us for delivery!"</li>
                                <li>Our business hours: 10:00am to 11:00pm, Monday through Saturday.</li>
                                <li>Our phone number (206-555-1212) and address (4306 University Way NE, Seattle, WA 98105)</li>
                                <li>Our email address (dawgpizzaseattle@gmail.com) and make it so that when you click it, it opens a new email message to us.</li>
                                <li>A link to our twitter feed (@DawgPizzaSea)</li>
                                <li>This <a target="_blank" href="img/pizza1.jpg">picture of our pizza</a></li>
                            </ul>
                        </li>
                        <li>The menu page should list out <a target="_blank" href="menu.txt">our various menu options</a>, and have this <a target="_blank" href="img/pizza-order.jpg">picture of our order counter</a> on it.</li>
                        <li>The "about us" page should have this on it:
                            <ul>
                                <li>This <a target="_blank" href="about.txt">text about our restaurant</a></li>
                                <li>A picture of <a target="_blank" href="img/pizza-oven.jpg">our wood-fired pizza oven</a></li>
                            </ul>
                        </li>
                    </ul>

                    <p>And if you get time, I'd also love to have one or more of these added:</p>
                    <ul>
                        <li>Add a "Jobs" page that says we are now hiring kitchen staff as well as delivery drivers.</li>
                        <li>Make it so that if someone clicks on our address, it takes them to Google Maps showing that address.</li>
                        <li>Add a footer to all the pages with a copyright declaration, and "Call us for delivery: 206-555-1212"</li>
                    </ul>
                </blockquote>

                <h3>Implementation Notes</h3>

                <p>It's generally best to start by sketching out your page designs on paper or a whiteboard before you start writing HTML and CSS. Start with the parts that would be common to all pages: where the logo should go; where the site navigation links should be and what they should look like; and any other info or design elements that you think should be on all the pages. Then sketch out the specifics for each page, laying out the page-specific elements so that they fit with the common elements, and offer the customer visual cues that help the customer find what he or she is looking for.</p>

                <p>There is no one right way to layout these pages, but remember that a quarter of your grade is based on the quality of the site's user experience. If the site is looks sloppy, simplistic, unintuitive, or amateurish, you will get a low grade. This is your opportunity to build something that you can include in a portfolio you send to prospective employers, so take it seriously, be professional, and do good work.</p>

                <div class="page-header">
                    <h2 id="v2">Version 2.0 <small>Due by Oct 24</small></h2>
                </div>

                <p>That quick site you built is the doing the job, but now that Dawg Pizza is open for business, Tony wants you to refresh the site with some better page layout and visual effects. He also wants to ensure that the site accessible to people with disabilities (they love pizza too), and that it looks good on smaller-screen devices like mobile phones and tablets. Lastly, he really wants the page to include the right meta-data so that Google and other search engines understand that this site is for a <a href="http://schema.org/Restaurant">restaurant</a>, and display it in search results with extra helpful information.</p>

                <p>For this version, Tony has requested a few specific page layouts, but other design elements like <a href="http://www.google.com/fonts">fonts</a>, text styling, box styling, transforms, transitions, animations, etc. are up to you. Remember that your goal is to build a site that his target customers (university students) would love. So be creative and utilize those skills you learned and practiced over the last few weeks.</p>

                <p>If you want to use a CSS framework (e.g., Bootstrap or Foundation) for this version, feel free to do so, but remember to follow their licensing requirements.</p>

                <p>Here is the message from the owner:</p>

                <blockquote>
                    <p>Hey, that first site was great, but I want you to do a couple of things to make it more engaging and useful. Here are my must-haves:</p>
                    <ul>
                        <li>Our graphic designer made us <a href="img/logo.png">a new logo</a> that I want you to use instead of the old one. There is also <a href="img/logo-vertical.png">a vertical version</a> if you'd rather use that.</li>
                        <li>On the menu page, I'd like a two-column layout for the various pizzas, with the meat ones on the left and the veggie ones on the right. The drinks and desserts should be below that in just one column.</li>
                        <li>I want the whole site to look great on a mobile phone or tablet. The text needs to adjust size, pictures need to scale, etc. Also on pages like the menu, it needs to flip to a single-column layout when viewed on a phone screen so that customers don't have to scroll to the right to see the veggie pies.</li>
                        <li>I want the whole site to be accessible to people with disabilities.</li>
                        <li>Embed <a target="_blank" href="http://www.youtube.com/watch?v=HWL__9yDu8I">this YouTube video</a> my friend made about tossing pizza dough on the home page.</li>
                    </ul>

                    <p>If you get time, I'd also love one or more of these:</p>

                    <ul>
                        <li>Some cool visual effects when people hover their mouse over various things.</li>
                        <li>It would be cool if the footer on all the pages was fixed on the bottom so that it stayed in place as you scrolled down the page.</li>
                        <li>Add a <a href="https://twitter.com/about/resources/buttons">"Follow Us on Twitter" button</a> that would automatically add the customer as a follower (provided the customer has a Twitter account of course).</li>
                        <li>I want Google and other search engines to know that this site is for a <a href="http://schema.org/Restaurant">restaurant</a>, so that they'll show extra helpful info in the search results (map, logo, phone number, hours, cuisine, link to menu, etc.)</li>
                    </ul>
                </blockquote>

                <h3>Implementation Notes</h3>

                <p>The last optional feature (letting Google know that this is a restaurant) involves adding what is called "microdata" to the page. We didn't get a chance to discuss this in class, but if you'd like to try adding this information, see the <a href="http://schema.org/docs/gs.html">Getting Started page on schema.org</a> for information on how to do it. Essentially, you add a number of extra attributes to your elements, which search indexers like Google will read in order to learn more about the organization to which this web page belongs.</p>

                <div class="page-header">
                    <h2 id="v3">Version 3.0 <small>Due by Nov 7</small></h2>
                </div>

                <p>Your second version of the site really helped attract customers to Tony's restaurant! He now wants you to do two main things for the third version: make the menu page data-driven (i.e., populated from a data structure rather than static HTML); and run your design through a focus group and incorporate their feedback.</p>

                <p>To make the menu data-driven, you'll use <a href="http://www.dawgpizza.com/orders/menu.js">a JavaScript file I've written</a>, which contains a data structure with information about the menu items. This data structure might easily come from a relational database, or could just exist in a file on the server that Tony can edit. In either case, this approach will allow Tony to change the menu items independently of your site design. He can add a new pizza, or change his prices, without having to change your complex HTML and CSS files.</p>

                <p>Your job is to use this data structure to generate your menu HTML dynamically, rather than just typying it in statically. The best way to do this is to use a templating approach like we did in Lab 5 and in class. Add a block of HTML to your menu page for each kind of menu item (pizza, drink, dessert) and use that block as a template for each item in that category. For example, you'd create one block of HTML as a template for a pizza, with elements to hold the pizza name, description, and prices. Then you would loop over all the pizzas in the data structure, clone the template, populate it with the current pizza information, and finally add it to your page.</p>

                <p>To get this menu data structure added to your page, include the following <code>&lt;script&gt;</code> element <strong>before</strong> your own JavaScript file that will use it:</p>

                <pre><code>
&lt;script src=&quot;http://www.dawgpizza.com/orders/menu.js&quot;&gt;&lt;/script&gt;
                </code></pre>

                <p>This script will define a global variable named <code>com.dawgpizza.menu</code>, which you can use in your script. That variable holds an object with three properties: <code>pizzas, drinks, and desserts</code>. Each of those properties contains an array of menu items objects. Each menu item object has the properties name and description. The pizza items have a property called prices, which is an array of 3 numbers representing the price for a small, medium and large version of that pizza. The drink and dessert items have a property named price, which is a single number representing the price of that item.</p>

                



                <p>The second thing you should do for this version is to put your site in front of a focus group.</p>


                <div class="page-header">
                    <h2 id="v4">Version 4.0 <small>Due by Nov 21</small></h2>
                </div>

                <p>Your redesigned site really helped attract customers to Tony's restaurant! He's now getting so busy that he wants to enable customers to place their delivery orders via the web site instead of having to call. For this version, you'll add some forms and scripting to make that possible.</p>

                <p>Since we don't get into building databases and server-side processing in this course, you'll need to post the order to a page I've already built for you on the server. See the <a href="#order-post">posting instructions</a> below for details.</p>

                <p>Here are your instructions from Tony:</p>

                <blockquote>
                    <p>Hey I need another feature added to the site: I want to let customers place a delivery order right through the site. I want it to work like a shopping cart, where they can add various things from the menu, and then place the entire order when they're ready. To see what I mean, check out the <a href="http://www.dinerwareonlineordering.com/dolo/order/ballardpizzacompany/menu/">online order page</a> for one of our competitors. It doesn't need to look exactly like this or do everything it does, but I want something similar.</p>

                    <p>Let's put this on a new page called "Order." Include a link to it on the home page, as well as the menu page.</p>

                    <p>At the top of that order page, put some text saying that we deliver only within the Seattle city limits, and only from noon to 11:00pm. We accept cash or credit cards on delivery.</p>

                    <p>Customers should be able to order any of our pizzas, in any size, as well as non-alcoholic drinks and desserts. You should shown them all the available menu items and let them just click something to add one to their order.</p>

                    <p>We don't allow for topping substitutions on deliveries, so they can only order one of our standard pizzas, but they can choose any of our available sizes.</p>

                    <p>Somewhere on the page you should show them what's currently on their order (that is, in their "cart"), and give them a way to remove something from the order if they added the wrong thing. A "start over" button that clears the entire order would also be handy.</p>

                    <p>For each item on the order, you should show the price for that item, and at the bottom of the current order, you should show the current subtotal (sum of all items in order). You should also show the tax amount (9.5% of subtotal), and the grand total (subtotal + tax).</p>

                    <p>We deliver for free, but to keep this economical, let's enforce a $20 minimum order.</p>

                    <p>Luckily, we don't need to collect credit card or other payment info when they order. Our delivery guys can process a card payment at the door using <a href="https://squareup.com/">Square</a>, or take cash.</p>

                    <p>We do, however, need to get their name, delivery address, and phone number before they place their order. Don't let them place the order until they've supplied a name, at least one line of their address, their zip code, and a phone number. Since we deliver only in Seattle, we only need their street address and zip code (no city or state).</p>

                    <p>If you have the time, here are some optional things I'd love to have:</p>

                    <ul>
                        <li>Store the customer's address locally and auto-populate it on their next order.</li>
                        <li>Store the customer's entire order locally, and offer something the customer can click on to place the same order as last time.</li>
                    </ul>

                </blockquote>

                <h3 id="order-post">Order Posting Instructions</h3>

                <p>Since this class is limited to the client side of web development, I've supplied a server-side page for you that can receive the data posted by your form, and echo back to the customer an order confirmation and receipt. The URL for this page is <code>http://dawgpizza.com/orders/</code>. It will only accept an HTTP POST (not a GET) so make sure you set the method on your form correctly.</p>

                <p>Shopping carts are typically too complicated for traditional HTML forms, so instead of building a <code>form</code> with lots of <code>input</code> and <code>select</code> elements, we will instead use a different technique that has become quite common now. You will maintain the shopping cart in JavaScript objects/arrays, and when you're ready to submit the order, you'll serialize those objects/arrays into a data-interchange format known as <a href="http://www.json.org/">JSON</a>. You'll then put this JSON into a single hidden <code>input</code> named <code>"cart"</code> and submit the form.</p>

                <p>This technique works well because it allows us to post a very complicated data structure with relative ease. HTML forms have a flat namespace, so it's often difficult to represent complex structures in separate form fields. JSON is a convenient interchange format, as it's easy to generate and parse in just about any language.</p>

                <p>But in order for this to work, we need to agree on the data structure used for the shopping cart. Here is what it needs to look like in JSON:</p>

                <pre><code>{
    "name": "Jane Student",
    "address1": "123 University Ave",
    "address2": "Apt 555",
    "zip": "98999",
    "phone": "206-999-9999",
    "nextUrl": "...url to go to next...",
    "nextCaption": "...optional text for next link...",
    "items": [
        {
            "type": "pizza",
            "name": "Classic Pepperoni",
            "size": "large"
        },
        {
            "type": "drink",
            "name": "Coke",
            "quantity": 4
        },
        {
            "type": "drink",
            "name": "Irn Bru"
        },
        {
            "type": "dessert",
            "name": "Lemon Sorbet",
            "quantity": 2
        }
    ]
}</code></pre>

                <p>The <code>name</code>, <code>address1</code>, <code>zip</code>, and <code>phone</code> properties are required, but <code>address2</code>, <code>nextUrl</code>, and <code>nextCaption</code> are optional. If you supply a url in the <code>nextUrl</code> property, the confirmation page will show a button at the bottom that when clicked will take the customer to that url. The default caption for that button is "Back to Home Page," but you can override that by including a <code>nextCaption</code> property.</p>

                <p>The <code>items</code> array may contain any number of items, but you can include a <code>quantity</code> property on any item to order multiple of that same thing (e.g., 4 Cokes in the example above). Note that the <code>quantity</code> property is a number, and thus should not be in quotes. Each item needs to have a <code>type</code> property set to 'pizza', 'drink', or 'dessert'. The <code>name</code> property should match the menu item exactly (case sensitive). For pizzas, you must also include a <code>size</code> property set to 'small', 'medium', or 'large'.</p>

                <p>This JSON is easily built from JavaScript objects and arrays that have the same property names as are listed in the JSON (e.g., "address1", "address2", "phone", etc). So if you have a JavaScript object named <code>myCart</code> with properties named "address1", "address2", "phone", and "items" (containing an array of other objects), you can serialize this to JSON in one line of code:</p>

                <pre><code>var json = JSON.stringify(myCart);</code></pre>

                <p>The <code>json</code> variable would now contain a JSON-encoded string of your entire shopping cart, which should look like the sample above. Note that it's OK if there are other properties included in your JSON (e.g., price). Those extra properties will just be ignored on the server.</p>

                <p>I'll leave it to you to figure out how to put that JSON string into an <code>&lt;input type="hidden" name="cart"&gt;</code> and submit the form.</p>

                <p>Lastly, I've also built a helpful script file that you can use to quickly get the menu items into a convenient JavaScript data structure. This structure will make it easier not only to build your ordering user interface, but also to maintain the contents of the shopping cart. To use this file, <a href="placeorder/menu.js">download it</a>, and include it in your project.</p>


                <div class="page-header">
                    <h2 id="v4">Version 4.0 <small>Due by Nov 21</small></h2>
                </div>

                <p>Your online delivery order page was a huge success, so much so that Tony now wants increase his engagement with his online customers. Here are your instructions:</p>

                <blockquote>
                    <p>Hey, I loved how your order page made it easy for our cusotmers to interact with us via the site. Now I'd like to add a few more features to that ordering process, as well as some other kinds of interaction.</p>

                    <p>We've been having some probems with customers entering invalid street addresses. Could you dynamically <a href="https://www.usps.com/business/web-tools-apis/address-information.htm">check the address they entered against the postal service records</a>? If the postal service doesn't think the address is valid, or has a cannonical suggestion, show that to the customer and have them verify the official version before you place the order.</p>

                    <p>It would also be great to just fill out the customer's zip code for them based on the street address they enter. The postal service should be able to give you that. If you can't get the zip from the postal service, let the customer enter it.</p>

                    <p>We already maintain a Twitter feed (@DawgPizzaSea), but I'd love to have those tweets <a href="https://dev.twitter.com/docs/embedded-timelines">displaying and updating live right on the home page</a>.</p>

                    <p>I'd also love one of those <a href="https://developers.google.com/maps/documentation/javascript/tutorial">interactive Google maps</a> right on the home page that shows where we are located.</p>

                    <p>Lastly, I'd like to include an interactive game on the site. This could be one of two things, depending on how much time you have, and how confident you feel. The first option would be a trivia quiz. Customers can test their pizza knowledge, and if they get 90% of the questions right, they get a coupon for a free pizza. I've written a few questions to get you started, but feel free to come up with some others of your own by searching the Internet.</p>

                    <p>The second option would be a more graphical, interactive speed game. Players would start with a screen full of our various ingredients on the right, and a big "Start" button on the left. When they start the game, a series of pizza names from our menu should be displayed at the top, one at a time, and the player must respond by clicking the correct set of ingredients that go on that kind of pizza. As soon as the player clicks all the correct ingredients, you go on to the next pizza name. The game ends after 30 seconds, and if the player builds 8 or more pizzas within that time, the player gets a free pizza coupon.</p>

                </blockquote>

                <h3>Notes on APIs</h3>

                <p>To use the Postal Service address APIs, you need to register to get a user id, which must be included in all requests (see <a href="https://www.usps.com/business/web-tools-apis/address-information.htm">their documentation</a>). This is very quick to do, but you do need to give them a valid email address, as they send you the user id via email.</p>

                <p>For the twitter feed, you can use Twitter's Widget creator on your own account to create the necessary code, and then change the Twitter user name to @DawgPizzaSea.</p>

                <h3>Notes on the Games</h3>

                <p>You may implement either game (or both if you're really ambitious). The first game will be easier to implement, but remember to provide engaging visual and auditory feedback. The second game will be more challenging to implement, but ultimately more satisfying as well.</p>

            </article>

            <!--#include virtual="../inc/footer.html" -->

        </div> <!-- .container -->

        <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
        <!-- Include all compiled plugins (below), or include individual files as needed -->
        <script src="../lib/bootstrap/js/bootstrap.min.js"></script>


    </body>
</html>